{"version":3,"sources":["utils/endpoints.js","utils/api.js","Classes/Card.js","Classes/Deck.js","Classes/DeckBuilder.js","utils/initDB.js","utils/views.js","index.js"],"names":["ENDPOINTS","INFO","CARD_BY_ID","CARDS_BY_CLASS","CARDS_BY_SET","CARDS_BY_TYPE","CARDS_BY_FACTION","CARDS_BY_QUALITY","CARDS_BY_RACE","MODIFIERS","IMG","RAPID_API_HOST","RAPID_API_KEY","getEndpoint","url","headers","Headers","append","response","fetch","method","ok","apiData","json","err","console","log","requestInfo","requestCardByCardId","cardId","card","pop","requestCardsByPlayerClass","playerClass","requestCardsByCardSet","cardSet","requestCardsByType","type","requestCardsByFaction","faction","requestCardsByRarity","rarity","requestCardsByRace","race","Card","constructor","_cardId","_cardSet","_type","_faction","_rarity","_race","_img","_buildImgUrl","_playerClass","_name","undefined","_cost","_attack","_health","_text","_flavor","_artist","_collectible","_elite","_locale","_infoCompleted","infoCompleted","img","image","name","cost","attack","health","text","flavor","artist","collectible","elite","locale","getAllProperties","info","Deck","_id","_uuidv4","_cards","replace","c","crypto","getRandomValues","Uint8Array","toString","id","cards","addCard","push","removeCard","filter","cardsInDeck","nCards","length","DeckBuilder","playerClasses","cardSets","types","factions","rarities","races","patch","_playerClasses","_cardSets","_types","_factions","_rarities","_races","_patch","_cardsCache","_cardsNoImageCache","_callsDone","_cardsShown","_decks","activeDeck","decks","_filtersObject","filtersApplied","firstFilter","_getBrowserInfo","JSON","parse","localStorage","getItem","browserDecks","browserCallsDone","browserCardsNoImageCache","browserCardsCache","forEach","newCard","deck","newDeck","find","setItem","stringify","removeItem","_rebuildCardsShownArray","filterKey","filterValue","filterWithCallDoneFound","Object","entries","k","v","call","newFiltersArray","splice","indexOf","unshift","someFilterApplied","cardsAlreadyGotFromCache","e","cardsRetrieved","_applyPlayerClassFilter","cardsByPlayerClass","_applyCardSetFilter","cardsByCardSet","_applyTypeFilter","cardsByType","_applyFactionFilter","cardsByFaction","cachedCard","_applyRarityFilter","cardsByRarity","_applyRaceFilter","cardsByRace","getCardByCardId","rawCard","collectibl","applyFilter","key","removeFilter","cardWithNoImg","getSelectors","arr","cardsShown","getDeck","addDeck","removeDeck","deckId","d","nCachedCards","initDB","db","classes","sets","qualities","drawFilters","selectors","select","document","createElement","classList","add","setAttribute","optionElement","textContent","appendChild","option","innerHTML","querySelector","bindFilterEvents","childNodes","selectId","dataset","identifier","addEventListener","event","target","value","drawCards","cardsContainer","noCardDiv","noCardImg","src","tyrande","noCardText","error","cardDiv","cardImg","removeChild","parentElement","cardsList","listElement","drawCardInfo","delContainer","del","createTextNode","getElementById","remove","drawDecks","decksContainer","titleDiv","title","createDeckButton","deckDiv","deckTitle","drawActiveDeck","insertBefore","contentEditable","substring","cardsInDeckContainer","deckFooter","backLink","cardInfoContainer","contentDiv"],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,MAAMA,EAAY,CAErBC,KAAM,qDACNC,WAAY,uDACZC,eAAgB,+DAChBC,aAAc,4DACdC,cAAe,6DACfC,iBAAkB,gEAClBC,iBAAkB,iEAClBC,cAAe,6DAIfC,UAAW,GAGXC,IAAK,+DAhBF,QAAA,UAAA;;ACwDN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAAA,QAAA,oBAAA,EAAA,QAAA,0BAAA,EAAA,QAAA,sBAAA,EAAA,QAAA,mBAAA,EAAA,QAAA,sBAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,mBAAA,EAxDD,IAAA,EAAA,QAAA,eAEA,MAAMC,EAAiB,wCACjBC,EAAgB,qDAKtB,eAAeC,EAAYC,GACjBC,MAAAA,EAAU,IAAIC,QACpBD,EAAQE,OAAO,kBAAmBN,GAClCI,EAAQE,OAAO,iBAAkBL,GAC7B,IACMM,MAAAA,QAAiBC,MAAML,EAAMd,EAAUS,UAAAA,UAAW,CAAEW,OAAQ,MAAOL,QAAAA,IACrEG,GAAAA,EAASG,GAAI,CAENC,aADeJ,EAASK,OAGxBL,OAAAA,EAASG,GAEtB,MAAOG,GACLC,QAAQC,IAAI,eAAgBF,IAI7B,eAAeG,IACX,aAAMd,EAAYb,EAAUC,UAAAA,MAGhC,eAAe2B,EAAoBC,GAE/BC,aADYjB,EAAYb,EAAUE,UAAAA,WAAa2B,IAC1CE,MAGT,eAAeC,EAA0BC,GACrC,aAAMpB,EAAYb,EAAUG,UAAAA,eAAiB8B,GAGjD,eAAeC,EAAsBC,GACjC,aAAMtB,EAAYb,EAAUI,UAAAA,aAAe+B,GAG/C,eAAeC,EAAmBC,GAC9B,aAAMxB,EAAYb,EAAUK,UAAAA,cAAgBgC,GAGhD,eAAeC,EAAsBC,GACjC,aAAM1B,EAAYb,EAAUM,UAAAA,iBAAmBiC,GAGnD,eAAeC,EAAqBC,GAChC,aAAM5B,EAAYb,EAAUO,UAAAA,iBAAmBkC,GAGnD,eAAeC,EAAmBC,GAC9B,aAAM9B,EAAYb,EAAUQ,UAAAA,cAAgBmC;;ACrDrC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAFlB,IAAA,EAAA,QAAA,sBAEO,MAAMC,EACTC,YAAYhB,EAAQM,EAASE,EAAME,EAASE,EAAQE,EAAMV,GAEjDa,KAAAA,QAAUjB,EACVkB,KAAAA,SAAWZ,EACXa,KAAAA,MAAQX,EACRY,KAAAA,SAAWV,EACXW,KAAAA,QAAUT,EACVU,KAAAA,MAAQR,EACRS,KAAAA,KAAO,KAAKC,aAAaxB,GACzByB,KAAAA,aAAerB,EAGfsB,KAAAA,WAAQC,EACRC,KAAAA,WAAQD,EACRE,KAAAA,aAAUF,EACVG,KAAAA,aAAUH,EACVI,KAAAA,WAAQJ,EACRK,KAAAA,aAAUL,EACVM,KAAAA,aAAUN,EACVO,KAAAA,kBAAeP,EACfQ,KAAAA,YAASR,EACTS,KAAAA,aAAUT,EACVU,KAAAA,gBAAiB,EAI1Bb,aAAaxB,GACF7B,OAAAA,EAAUU,UAAAA,IAAMmB,EAAS,OAIhCsC,oBACO,OAAA,KAAKD,eAGZC,kBAAcA,GACTD,KAAAA,eAAiBC,EAGtBtC,aACO,OAAA,KAAKiB,QAOZb,kBACO,OAAA,KAAKqB,aAOZnB,cACO,OAAA,KAAKY,SAOZV,WACO,OAAA,KAAKW,MAOZT,cACO,OAAA,KAAKU,SAGZV,YAAQA,GACHU,KAAAA,SAAWV,EAGhBE,aACO,OAAA,KAAKS,QAGZT,WAAOA,GACFS,KAAAA,QAAUT,EAGfE,WACO,OAAA,KAAKQ,MAGZR,SAAKA,GACAQ,KAAAA,MAAQR,EAGbyB,UACO,OAAA,KAAKhB,KAGZgB,QAAIC,GACCjB,KAAAA,KAAOiB,EAGZC,WACO,OAAA,KAAKf,MAGZe,SAAKA,GACAf,KAAAA,MAAQe,EAGbC,WACO,OAAA,KAAKd,MAGZc,SAAKA,GACAd,KAAAA,MAAQc,EAGbC,aACO,OAAA,KAAKd,QAGZc,WAAOA,GACFd,KAAAA,QAAUc,EAGfC,aACO,OAAA,KAAKd,QAGZc,WAAOA,GACFd,KAAAA,QAAUc,EAGfC,WACO,OAAA,KAAKd,MAGZc,SAAKA,GACAd,KAAAA,MAAQc,EAGbC,aACO,OAAA,KAAKd,QAGZc,WAAOA,GACFd,KAAAA,QAAUc,EAGfC,aACO,OAAA,KAAKd,QAGZc,WAAOA,GACFd,KAAAA,QAAUc,EAGfC,kBACO,OAAA,KAAKd,aAGZc,gBAAYA,GACPd,KAAAA,aAAec,EAGpBC,YACO,OAAA,KAAKd,OAGZc,UAAMA,GACDd,KAAAA,OAASc,EAGdC,aACO,OAAA,KAAKd,QAGZc,WAAOA,GACFd,KAAAA,QAAUc,EAInBC,mBACUC,MAAAA,EAAO,GAkBNA,OAjBH,KAAKnC,UAASmC,EAAK,WAAa,KAAKnC,SACrC,KAAKQ,eAAc2B,EAAK,gBAAkB,KAAK3B,cAC/C,KAAKP,WAAUkC,EAAK,YAAc,KAAKlC,UACvC,KAAKC,QAAOiC,EAAI,KAAW,KAAKjC,OAChC,KAAKC,WAAUgC,EAAI,QAAc,KAAKhC,UACtC,KAAKC,UAAS+B,EAAI,OAAa,KAAK/B,SACpC,KAAKC,QAAO8B,EAAI,KAAW,KAAK9B,OAEhC,KAAKI,QAAO0B,EAAI,KAAW,KAAK1B,OAChC,KAAKE,QAAOwB,EAAI,KAAW,KAAKxB,OAChC,KAAKC,UAASuB,EAAI,OAAa,KAAKvB,SACpC,KAAKC,UAASsB,EAAI,OAAa,KAAKtB,SACpC,KAAKC,QAAOqB,EAAI,KAAW,KAAKrB,OAChC,KAAKC,UAASoB,EAAI,OAAa,KAAKpB,SACpC,KAAKC,UAASmB,EAAI,OAAa,KAAKnB,SACpC,KAAKE,SAAQiB,EAAI,MAAY,KAAKjB,QAE/BiB,GA5MG,QAAA,KAAA;;ACFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAAX,MAAMC,EACTrC,cACSsC,KAAAA,IAAM,KAAKC,UACX7B,KAAAA,MAAQ,WACR8B,KAAAA,OAAS,GAGlBD,UACW,OAAC,CAAC,MAAQ,KAAO,KAAO,KAAO,MAAME,QAAQ,SAAUC,IACzDA,EAAKC,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,GAAM,IAAOH,EAAI,GAAMI,SAAS,KAIpFC,SACO,OAAA,KAAKT,IAGZb,WACO,OAAA,KAAKf,MAGZe,SAAKA,GACAf,KAAAA,MAAQe,EAGbuB,YACO,OAAA,KAAKR,OAGhBS,QAAQhE,GACCuD,KAAAA,OAAOU,KAAKjE,GAGrBkE,WAAWnE,GACFwD,KAAAA,OAAS,KAAKA,OAAOY,OAAOC,GAAeA,EAAYrE,SAAWA,GAGvEsE,aACO,OAAA,KAAKd,OAAOe,QAtCT,QAAA,KAAA;;ACYO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAZzB,IAAA,EAAA,QAAA,gBASA,EAAA,QAAA,mBACA,EAAA,QAAA,UAEO,MAAMC,EACTxD,YAAYyD,EAAeC,EAAUC,EAAOC,EAAUC,EAAUC,EAAOC,GAE9DC,KAAAA,eAAiBP,EACjBQ,KAAAA,UAAYP,EACZQ,KAAAA,OAASP,EACTQ,KAAAA,UAAYP,EACZQ,KAAAA,UAAYP,EACZQ,KAAAA,OAASP,EACTQ,KAAAA,OAASP,EAGTQ,KAAAA,YAAc,GACdC,KAAAA,mBAAqB,GAGrBC,KAAAA,WAAa,CACdzF,OAAQ,GACRI,YAAa,GACbE,QAAS,GACTE,KAAM,GACNE,QAAS,GACTE,OAAQ,GACRE,KAAM,IAIL4E,KAAAA,YAAc,GAGdC,KAAAA,OAAS,CAEVC,gBAAYjE,EAEZkE,MAAO,IAINC,KAAAA,eAAiB,CAClBC,eAAgB,CACZ3F,aAAa,EACbE,SAAS,EACTE,MAAM,EACNE,SAAS,EACTE,QAAQ,EACRE,MAAM,GAGVkF,iBAAarE,GAIZsE,KAAAA,kBAITA,kBAEQC,GAAAA,KAAKC,MAAMC,aAAaC,QAAQ,kCAAoC,KAAKf,OAAQ,CAE3EgB,MAAAA,EAAeJ,KAAKC,MAAMC,aAAaC,QAAQ,gCAC/CE,EAAmBL,KAAKC,MAAMC,aAAaC,QAAQ,oCACnDG,EAA2BN,KAAKC,MAClCC,aAAaC,QAAQ,4CAEnBI,EAAoBP,KAAKC,MAC3BC,aAAaC,QAAQ,qCAIrBE,GAAAA,GAAoBE,GAAqBD,IAEpCf,KAAAA,WAAac,EAGlBE,EAAkBC,QAAQzG,IAChB0G,MAAAA,EAAU,IAAI5F,EAAJ,KACZd,EAAKgB,QACLhB,EAAKiB,SACLjB,EAAKkB,MACLlB,EAAKmB,SACLnB,EAAKoB,QACLpB,EAAKqB,MACLrB,EAAKwB,cAGTkF,EAAQlE,KAAOxC,EAAKyB,MACpBiF,EAAQjE,KAAOzC,EAAK2B,MACpB+E,EAAQhE,OAAS1C,EAAK4B,QACtB8E,EAAQ/D,OAAS3C,EAAK6B,QACtB6E,EAAQ9D,KAAO5C,EAAK8B,MACpB4E,EAAQ7D,OAAS7C,EAAK+B,QACtB2E,EAAQ5D,OAAS9C,EAAKgC,QACtB0E,EAAQ3D,YAAc/C,EAAKiC,aAC3ByE,EAAQ1D,MAAQhD,EAAKkC,OACrBwE,EAAQzD,OAASjD,EAAKmC,QACtBuE,EAAQrE,cAAgBrC,EAAKoC,eAExBkD,KAAAA,YAAYrB,KAAKyC,KAI1BH,EAAyBE,QAAQzG,IACvB0G,MAAAA,EAAU,IAAI5F,EAAJ,KACZd,EAAKgB,QACLhB,EAAKiB,SACLjB,EAAKkB,MACLlB,EAAKmB,SACLnB,EAAKoB,QACLpB,EAAKqB,MACLrB,EAAKwB,cAETkF,EAAQpE,IAAM,mBACdoE,EAAQlE,KAAOxC,EAAKyB,MACpBiF,EAAQjE,KAAOzC,EAAK2B,MACpB+E,EAAQhE,OAAS1C,EAAK4B,QACtB8E,EAAQ/D,OAAS3C,EAAK6B,QACtB6E,EAAQ9D,KAAO5C,EAAK8B,MACpB4E,EAAQ7D,OAAS7C,EAAK+B,QACtB2E,EAAQ5D,OAAS9C,EAAKgC,QACtB0E,EAAQ3D,YAAc/C,EAAKiC,aAC3ByE,EAAQ1D,MAAQhD,EAAKkC,OACrBwE,EAAQzD,OAASjD,EAAKmC,QACtBuE,EAAQrE,cAAgBrC,EAAKoC,eACxBmD,KAAAA,mBAAmBtB,KAAKyC,KAI7BL,GAEK,IAAA,MAAMM,KAAQN,EAAc,CACvBO,MAAAA,EAAU,IAAIxD,EAAJ,KAChBwD,EAAQpE,KAAOmE,EAAKlF,MACf,IAAA,MAAMzB,KAAQ2G,EAAKpD,OAAQ,CACtBmD,MAAAA,EAAU,KAAKpB,YAAYuB,KAAKpD,GAAKA,EAAE1D,SAAWC,EAAKgB,SAC7D4F,EAAQ5C,QAAQ0C,GAEfhB,KAAAA,OAAOE,MAAM3B,KAAK2C,SAMnCT,aAAaW,QAAQ,8BAA+Bb,KAAKc,UAAU,KAAK1B,SACxEc,aAAaa,WAAW,mCACxBb,aAAaa,WAAW,+BACxBb,aAAaa,WAAW,2CACxBb,aAAaa,WAAW,oCAO1BC,8BAAwBC,EAAWC,GAMjC,GAJCtB,KAAAA,eAAeC,eAAeoB,GAAaC,GAI3C,KAAKtB,eAAeE,YAAa,CAC9BqB,IAAAA,GAA0B,EAE9BC,OAAOC,QAAQ,KAAKzB,eAAeC,gBAAgBW,QAAQ,EAAEc,EAAGC,MAExDD,IAAML,IAAmB,IAANM,IAEdJ,IAEIvB,KAAAA,eAAeE,YAAcwB,EAK9B,KAAK/B,WAAW+B,GAAGV,KAAKY,GAAQA,IAASD,KAAIJ,GAA0B,OAWvF,GAJC3B,KAAAA,YAAc,GAIf,KAAKI,eAAeE,YAAa,CAE3B2B,MAAAA,EAAkBL,OAAOC,QAAQ,KAAKzB,eAAeC,gBAAgB3B,OACvEA,IAAwB,IAAdA,EAAO,IAIfiD,EAA0BM,EAAgBb,KAC5C,EAAEU,KAAOA,IAAM,KAAK1B,eAAeE,aAUnC2B,GALAN,IACAM,EAAgBC,OAAOD,EAAgBE,QAAQR,GAA0B,GACzEM,EAAgBG,QAAQT,IAGxBM,GAAmB,KAAKI,kBAAmB,CACvCC,IAAAA,GAA2B,EAE1B,IAAA,MAAM5D,KAAUuD,EAAiB,CAC5BH,MAAAA,EAAIpD,EAAO,GACXqD,EAAIrD,EAAO,GAEbqD,IAAM,IAANA,EAEI,GAA4B,IAA5B,KAAK/B,YAAYnB,QAAiByD,EA0E7BtC,KAAAA,YAAc,KAAKA,YAAYtB,OAAOV,GAAKA,EAAE8D,KAAOC,OA1EG,CAGxD,IAAC,KAAKhC,WAAW+B,GAAGV,KAAKmB,GAAKA,IAAMR,GAAI,CACpCS,IAAAA,EAEIV,OAAAA,GACC,IAAA,cACDU,QAAuB,EAA0BT,EAAAA,2BAAAA,GAC5ChC,KAAAA,WAAWrF,YAAY8D,KAAKuD,GACjC,MACC,IAAA,UACDS,QAAuB,EAAsBT,EAAAA,uBAAAA,GACxChC,KAAAA,WAAWnF,QAAQ4D,KAAKuD,GAC7B,MACC,IAAA,OACDS,QAAuB,EAAmBT,EAAAA,oBAAAA,GACrChC,KAAAA,WAAWjF,KAAK0D,KAAKuD,GAC1B,MACC,IAAA,UACDS,QAAuB,EAAsBT,EAAAA,uBAAAA,GACxChC,KAAAA,WAAW/E,QAAQwD,KAAKuD,GAC7B,MACC,IAAA,SACDS,QAAuB,EAAqBT,EAAAA,sBAAAA,GACvChC,KAAAA,WAAW7E,OAAOsD,KAAKuD,GAC5B,MACC,IAAA,OACDS,QAAuB,EAAmBT,EAAAA,oBAAAA,GACrChC,KAAAA,WAAW3E,KAAKoD,KAAKuD,GAI9BS,GACAA,EAAexB,QAAQuB,IACA,KAAK1C,YAAYuB,KAAK7G,GAAQA,EAAKD,SAAWiI,EAAEjI,SAE1DuF,KAAAA,YAAYrB,KACb,IAAInD,EAAJ,KACIkH,EAAEjI,OACFiI,EAAE3H,QACF2H,EAAEzH,KACFyH,EAAEvH,QACFuH,EAAErH,OACFqH,EAAEnH,KACFmH,EAAE7H,gBAOtBgG,aAAaW,QACT,kCACAb,KAAKc,UAAU,KAAKvB,aAExBW,aAAaW,QACT,0CACAb,KAAKc,UAAU,KAAKxB,qBAExBY,aAAaW,QACT,mCACAb,KAAKc,UAAU,KAAKzB,cAKvBG,KAAAA,YAAc,KAAKH,YAAYnB,OAAOV,GAAKA,EAAE8D,KAAOC,GAIzDO,GAA2B,MAiB7CG,8BAAwB/H,GAEtB,IAAC,KAAKqF,WAAWrF,YAAY0G,KAAKmB,GAAKA,IAAM7H,KAC5C,KAAK0F,eAAeE,YACvB,CACQoC,MAAAA,QAA2B,EAA0BhI,EAAAA,2BAAAA,GACvDgI,GACAA,EAAmB1B,QAAQuB,IACJ,KAAK1C,YAAYuB,KAAK7G,GAAQA,EAAKD,SAAWiI,EAAEjI,SAE1DuF,KAAAA,YAAYrB,KACb,IAAInD,EAAJ,KAASkH,EAAEjI,OAAQiI,EAAE3H,QAAS2H,EAAEzH,KAAMyH,EAAEvH,QAASuH,EAAErH,OAAQqH,EAAEnH,KAAMmH,EAAE7H,gBAKhFqF,KAAAA,WAAWrF,YAAY8D,KAAK9D,GAGhC,KAAK0F,eAAeE,cAAa,KAAKF,eAAeE,YAAc,qBAGlE,KAAKkB,wBAAwB,cAAe9G,GAMhDiI,0BAAoB/H,GAClB,IAAC,KAAKmF,WAAWnF,QAAQwG,KAAKmB,GAAKA,IAAM3H,KAAa,KAAKwF,eAAeE,YAAa,CACjFsC,MAAAA,QAAuB,EAAsBhI,EAAAA,uBAAAA,GAC/CgI,GACAA,EAAe5B,QAAQuB,IACA,KAAK1C,YAAYuB,KAAK7G,GAAQA,EAAKD,SAAWiI,EAAEjI,SAE1DuF,KAAAA,YAAYrB,KACb,IAAInD,EAAJ,KAASkH,EAAEjI,OAAQiI,EAAE3H,QAAS2H,EAAEzH,KAAMyH,EAAEvH,QAASuH,EAAErH,OAAQqH,EAAEnH,KAAMmH,EAAE7H,gBAMhFqF,KAAAA,WAAWnF,QAAQ4D,KAAK5D,GAG5B,KAAKwF,eAAeE,cAAa,KAAKF,eAAeE,YAAc,iBAGlE,KAAKkB,wBAAwB,UAAW5G,GAM5CiI,uBAAiB/H,GACf,IAAC,KAAKiF,WAAWjF,KAAKsG,KAAKmB,GAAKA,IAAMzH,KAAU,KAAKsF,eAAeE,YAAa,CAC3EwC,MAAAA,QAAoB,EAAmBhI,EAAAA,oBAAAA,GACzCgI,GACAA,EAAY9B,QAAQuB,IACG,KAAK1C,YAAYuB,KAAK7G,GAAQA,EAAKD,SAAWiI,EAAEjI,SAE1DuF,KAAAA,YAAYrB,KACb,IAAInD,EAAJ,KAASkH,EAAEjI,OAAQiI,EAAE3H,QAAS2H,EAAEzH,KAAMyH,EAAEvH,QAASuH,EAAErH,OAAQqH,EAAEnH,KAAMmH,EAAE7H,gBAMhFqF,KAAAA,WAAWjF,KAAK0D,KAAK1D,GAGzB,KAAKsF,eAAeE,cAAa,KAAKF,eAAeE,YAAc,cAElE,KAAKkB,wBAAwB,OAAQ1G,GAMzCiI,0BAAoB/H,GAClB,IAAC,KAAK+E,WAAW/E,QAAQoG,KAAKmB,GAAKA,IAAMvH,KAAa,KAAKoF,eAAeE,YAAa,CACjF0C,MAAAA,QAAuB,EAAsBhI,EAAAA,uBAAAA,GAE/CgI,GACAA,EAAehC,QAAQuB,IACbU,MAAAA,EAAa,KAAKpD,YAAYuB,KAAK7G,GAAQA,EAAKD,SAAWiI,EAAEjI,QAC9D2I,EAKIpD,KAAAA,YAAYuB,KAAKpD,GAAKA,EAAE1D,SAAW2I,EAAW3I,QAAQU,QAAUuH,EAAEvH,QAJlE6E,KAAAA,YAAYrB,KACb,IAAInD,EAAJ,KAASkH,EAAEjI,OAAQiI,EAAE3H,QAAS2H,EAAEzH,KAAMyH,EAAEvH,QAASuH,EAAErH,OAAQqH,EAAEnH,KAAMmH,EAAE7H,gBAQhFqF,KAAAA,WAAW/E,QAAQwD,KAAKxD,GAG5B,KAAKoF,eAAeE,cAAa,KAAKF,eAAeE,YAAc,iBAElE,KAAKkB,wBAAwB,UAAWxG,GAM5CkI,yBAAmBhI,GACjB,IAAC,KAAK6E,WAAW7E,OAAOkG,KAAKmB,GAAKA,IAAMrH,KAAY,KAAKkF,eAAeE,YAAa,CAC/E6C,MAAAA,QAAsB,EAAqBjI,EAAAA,sBAAAA,GAC7CiI,GACAA,EAAcnC,QAAQuB,IACZU,MAAAA,EAAa,KAAKpD,YAAYuB,KAAK7G,GAAQA,EAAKD,SAAWiI,EAAEjI,QAC9D2I,EAKIpD,KAAAA,YAAYuB,KAAKpD,GAAKA,EAAE1D,SAAW2I,EAAW3I,QAAQY,OAASqH,EAAErH,OAJjE2E,KAAAA,YAAYrB,KACb,IAAInD,EAAJ,KAASkH,EAAEjI,OAAQiI,EAAE3H,QAAS2H,EAAEzH,KAAMyH,EAAEvH,QAASuH,EAAErH,OAAQqH,EAAEnH,KAAMmH,EAAE7H,gBAQhFqF,KAAAA,WAAW7E,OAAOsD,KAAKtD,GAG3B,KAAKkF,eAAeE,cAAa,KAAKF,eAAeE,YAAc,gBAElE,KAAKkB,wBAAwB,SAAUtG,GAM3CkI,uBAAiBhI,GACf,IAAC,KAAK2E,WAAW3E,KAAKgG,KAAKmB,GAAKA,IAAMnH,KAAU,KAAKgF,eAAeE,YAAa,CAC3E+C,MAAAA,QAAoB,EAAmBjI,EAAAA,oBAAAA,GACzCiI,GACAA,EAAYrC,QAAQuB,IACVU,MAAAA,EAAa,KAAKpD,YAAYuB,KAAK7G,GAAQA,EAAKD,SAAWiI,EAAEjI,QAC9D2I,EAKIpD,KAAAA,YAAYuB,KAAKpD,GAAKA,EAAE1D,SAAW2I,EAAW3I,QAAQc,KAAOmH,EAAEnH,KAJ/DyE,KAAAA,YAAYrB,KACb,IAAInD,EAAJ,KAASkH,EAAEjI,OAAQiI,EAAE3H,QAAS2H,EAAEzH,KAAMyH,EAAEvH,QAASuH,EAAErH,OAAQqH,EAAEnH,KAAMmH,EAAE7H,gBAQhFqF,KAAAA,WAAW3E,KAAKoD,KAAKpD,GAGzB,KAAKgF,eAAeE,cAAa,KAAKF,eAAeE,YAAc,cAClE,KAAKkB,wBAAwB,OAAQpG,GAIzCkI,sBAAgBhJ,GACZ2I,MAAAA,EAAa,KAAKpD,YAAYuB,KAAK7G,GAAQA,EAAKD,SAAWA,GAC7D2I,GAAAA,GAAcA,EAAWrG,cAClBqG,OAAAA,EACJ,CACGM,MAAAA,QAAgB,EAAoBjJ,EAAAA,qBAAAA,GACtCiJ,GAAAA,EAAS,CACHN,MAAAA,EAAa,KAAKpD,YAAYuB,KAAK7G,GAAQA,EAAKD,SAAWiJ,EAAQjJ,QAErE,GAAC2I,EAiDMA,OAlBPA,EAAWjI,QAAUuI,EAAQvI,QAC7BiI,EAAW/H,OAASqI,EAAQrI,OAC5B+H,EAAW7H,KAAOmI,EAAQnI,KAC1B6H,EAAWlG,KAAOwG,EAAQxG,KAC1BkG,EAAWjG,KAAOuG,EAAQvG,KAC1BiG,EAAWhG,OAASsG,EAAQtG,OAC5BgG,EAAW/F,OAASqG,EAAQrG,OAC5B+F,EAAW9F,KAAOoG,EAAQpG,KAC1B8F,EAAW7F,OAASmG,EAAQnG,OAC5B6F,EAAW5F,OAASkG,EAAQlG,OAC5B4F,EAAW3F,YAAciG,EAAQC,WACjCP,EAAW1F,MAAQgG,EAAQhG,MAC3B0F,EAAWzF,OAAS+F,EAAQ/F,OAC5ByF,EAAWrG,eAAgB,EAC3B8D,aAAaW,QACT,mCACAb,KAAKc,UAAU,KAAKzB,cAEjBoD,EAjDM,CACP1I,MAAAA,EAAO,IAAIc,EAAJ,KACTkI,EAAQjJ,OACRiJ,EAAQ3I,QACR2I,EAAQzI,KACRyI,EAAQvI,QACRuI,EAAQrI,OACRqI,EAAQnI,KACRmI,EAAQ7I,aAoBLH,OAjBPA,EAAKwC,KAAOwG,EAAQxG,KACpBxC,EAAKyC,KAAOuG,EAAQvG,KACpBzC,EAAK0C,OAASsG,EAAQtG,OACtB1C,EAAK2C,OAASqG,EAAQrG,OACtB3C,EAAK4C,KAAOoG,EAAQpG,KACpB5C,EAAK6C,OAASmG,EAAQnG,OACtB7C,EAAK8C,OAASkG,EAAQlG,OACtB9C,EAAK+C,YAAciG,EAAQC,WAC3BjJ,EAAKgD,MAAQgG,EAAQhG,MACrBhD,EAAKiD,OAAS+F,EAAQ/F,OACtBjD,EAAKqC,eAAgB,EAEhBiD,KAAAA,YAAYrB,KAAKjE,GACtBmG,aAAaW,QACT,mCACAb,KAAKc,UAAU,KAAKzB,cAEjBtF,KA8BjBkJ,kBAAYC,EAAKhF,GACXgF,OAAAA,GACC,IAAA,oBACK,KAAKjB,wBAAwB/D,GACnC,MACC,IAAA,gBACK,KAAKiE,oBAAoBjE,GAC/B,MACC,IAAA,aACK,KAAKmE,iBAAiBnE,GAC5B,MACC,IAAA,gBACK,KAAKqE,oBAAoBrE,GAC/B,MACC,IAAA,eACK,KAAKwE,mBAAmBxE,GAC9B,MACC,IAAA,aACK,KAAK0E,iBAAiB1E,GAC5B,MACJ,QACW,OAAC,EAWT,OAPPgC,aAAaW,QAAQ,kCAAmCb,KAAKc,UAAU,KAAKvB,aAC5EW,aAAaW,QACT,0CACAb,KAAKc,UAAU,KAAKxB,qBAExBY,aAAaW,QAAQ,mCAAoCb,KAAKc,UAAU,KAAKzB,cAEtE,KAAKG,YAMV2D,mBAAalC,GAEX,KAAKrB,eAAeC,eAAeoB,KAE/B,KAAKrB,eAAeE,cAAgBmB,IAC/BrB,KAAAA,eAAeE,iBAAcrE,SAEhC,KAAKuF,wBAAwBC,GAAW,IAMtDmC,cAAcA,GACL5D,KAAAA,YAAc,KAAKA,YAAYtB,OAAOnE,GAAQA,EAAKD,SAAWsJ,EAActJ,QAC5EuF,KAAAA,YAAc,KAAKA,YAAYnB,OAAOnE,GAAQA,EAAKD,SAAWsJ,EAActJ,QACjFsJ,EAAc/G,IAAM,mBACfiD,KAAAA,mBAAmBtB,KAAKoF,GAC7BlD,aAAaW,QACT,0CACAb,KAAKc,UAAU,KAAKxB,qBAExBY,aAAaW,QAAQ,mCAAoCb,KAAKc,UAAU,KAAKzB,cAGjFwC,oBACQ,QAAA,KAAKjC,eAAeE,YAQ5BuD,eACW,MAAA,CACHnJ,YAAa,CACTyC,KAAM,iBACN2G,IAAK,KAAKxE,gBAEd1E,QAAS,CACLuC,KAAM,YACN2G,IAAK,KAAKvE,WAEdzE,KAAM,CACFqC,KAAM,QACN2G,IAAK,KAAKtE,QAEdxE,QAAS,CACLmC,KAAM,WACN2G,IAAK,KAAKrE,WAEdvE,OAAQ,CACJiC,KAAM,WACN2G,IAAK,KAAKpE,WAEdtE,KAAM,CACF+B,KAAM,QACN2G,IAAK,KAAKnE,SAKlBZ,oBACO,OAAA,KAAKO,eAGZN,eACO,OAAA,KAAKO,UAGZN,YACO,OAAA,KAAKO,OAGZN,eACO,OAAA,KAAKO,UAGZN,eACO,OAAA,KAAKO,UAGZN,YACO,OAAA,KAAKO,OAGZN,YACO,OAAA,KAAKO,OAGZmE,iBACO,OAAA,KAAK/D,YAGZG,YACO,OAAA,KAAKF,OAAOE,MAGvB6D,QAAQ3F,GACG,OAAA,KAAK4B,OAAOE,MAAMiB,KAAKF,GAAQA,EAAK7C,KAAOA,GAGtD4F,QAAQ/C,GACCjB,KAAAA,OAAOE,MAAM3B,KAAK0C,GAG3BgD,WAAWC,GACFlE,KAAAA,OAAOE,MAAQ,KAAKF,OAAOE,MAAMzB,OAAO0F,GAAKA,EAAE/F,KAAO8F,GAG3DjE,iBACO,OAAA,KAAKD,OAAOC,WAGnBA,eAAW7B,GACN4B,KAAAA,OAAOC,WAAa7B,EAGzBgG,mBACO,OAAA,KAAKxE,YAAYhB,OAAS,KAAKiB,mBAAmBjB,QA3qBxC,QAAA,YAAA;;ACOxB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,EAnBD,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,0BAKO,eAAeyF,IACZ5G,MAAAA,QAAa,EAAnB,EAAA,eAWO6G,OAVI,IAAIzF,EAAJ,YACPpB,EAAK8G,QACL9G,EAAK+G,KACL/G,EAAKuB,MACLvB,EAAKwB,SACLxB,EAAKgH,UACLhH,EAAK0B,MACL1B,EAAK2B;;;;;;AC2TZ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAAA,QAAA,iBAAA,EAAA,QAAA,UAAA,EAAA,QAAA,UAAA,EAAA,QAAA,aAAA,EA1UD,IAAA,EAAA,EAAA,QAAA,6BACA,EAAA,EAAA,QAAA,8BACA,EAAA,QAAA,mBAwUC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArUM,eAAesF,EAAYJ,GACxBK,MAAAA,EAAYL,EAAGV,eACrBjC,OAAOC,QAAQ+C,GAAW5D,QAAQ,EAAEc,EAAGC,MAC7B8C,MAAAA,EAASC,SAASC,cAAc,UACtCF,EAAOG,UAAUC,IAAI,iBACrBJ,EAAOxG,GAAK0D,EAAE5E,KAAKY,QAAQ,MAAO,KAAO,UACzC8G,EAAOK,aAAa,kBAAmBpD,GACjCqD,MAAAA,EAAgBL,SAASC,cAAc,UAC7CI,EAAcD,aAAa,QAAS,IACpCC,EAAcC,YAAc,OAASrD,EAAE5E,KACvC0H,EAAOQ,YAAYF,GACnBpD,EAAE+B,IAAI9C,QAAQsE,IACJH,MAAAA,EAAgBL,SAASC,cAAc,UAC7CI,EAAcD,aAAa,QAASI,GACpCH,EAAcI,UAAYD,EAC1BT,EAAOQ,YAAYF,KAEvBL,SAASU,cAAc,qBAAqBH,YAAYR,KAI5DC,SAASU,cAAc,UAAUD,UAAY,UAAYhB,EAAGlF,MAIzD,eAAeoG,EAAiBlB,GAEnCO,SAASU,cAAc,qBAAqBE,WAAW1E,QAAQ6D,IACrDc,MAAAA,EAAWd,EAAOe,QAAQC,WAChChB,EAAOiB,iBAAiB,SAAU,MAAA,IACPhB,SAASU,cAAc,mBAE/BD,UAAY,uCACtBQ,EAAMC,OAAOC,YAKR1B,EAAGd,YAAYkC,EAAUI,EAAMC,OAAOC,aAHtC1B,EAAGZ,aAAagC,GAM1BO,EAAU3B,OAMf,SAAS2B,EAAU3B,GAChB4B,MAAAA,EAAiBrB,SAASU,cAAc,mBAG1CjB,GAFJ4B,EAAef,YAAc,GAEA,IAAzBb,EAAGR,WAAWlF,SAAiB0F,EAAGlC,oBAAqB,CACjD+D,MAAAA,EAAYtB,SAASC,cAAc,OACzCqB,EAAUpB,UAAUC,IAAI,iBAAkB,WACpCoB,MAAAA,EAAYvB,SAASC,cAAc,OACzCsB,EAAUC,IAAMC,EAAhB,QACAF,EAAUrB,UAAUC,IAAI,sBAClBuB,MAAAA,EAAa1B,SAASC,cAAc,MAC1CyB,EAAWjB,UAAY,8BACvBiB,EAAWxB,UAAUC,IAAI,uBACzBmB,EAAUf,YAAYgB,GACtBD,EAAUf,YAAYmB,GACtBL,EAAed,YAAYe,GAG3B7B,GAAyB,IAAzBA,EAAGR,WAAWlF,QAAgB0F,EAAGlC,oBAAqB,CAChD+D,MAAAA,EAAYtB,SAASC,cAAc,OACzCqB,EAAUpB,UAAUC,IAAI,iBAAkB,WACpCoB,MAAAA,EAAYvB,SAASC,cAAc,OACzCsB,EAAUC,IAAMG,EAAhB,QACAJ,EAAUrB,UAAUC,IAAI,aAClBuB,MAAAA,EAAa1B,SAASC,cAAc,MAC1CyB,EAAWjB,UAAY,+BACvBiB,EAAWxB,UAAUC,IAAI,uBACzBmB,EAAUf,YAAYgB,GACtBD,EAAUf,YAAYmB,GACtBL,EAAed,YAAYe,QAG3B7B,EAAGR,WAAW/C,QAAQ,MAAA,IACZ0F,MAAAA,EAAU5B,SAASC,cAAc,OACvC2B,EAAQ1B,UAAUC,IAAI,6BAChB0B,MAAAA,EAAU7B,SAASC,cAAc,OACvC4B,EAAQ3B,UAAUC,IAAI,YACtB0B,EAAQL,IAAMtI,EAAEnB,IAChB8J,EAAQtI,GAAKL,EAAE1D,OAEfqM,EAAQb,iBAAiB,QAAS,KAC9BhB,SACKU,cAAc,mBACdoB,YAAY9B,SAASU,cAAc,IAAMxH,EAAE1D,QAAQuM,eACxDtC,EAAGX,cAAc5F,KAGrB2I,EAAQb,iBAAiB,QAAS,MAAA,IAI1BvB,SAFEA,EAAGjB,gBAAgByC,EAAMC,OAAO3H,IAElCkG,EAAGrE,WAAY,CAETgB,MAAAA,EAAOqD,EAAGP,QAAQO,EAAGrE,YAC3BgB,EAAK3C,QAAQP,GAEb0C,aAAaW,QAAQ,8BAA+Bb,KAAKc,UAAUiD,EAAGpE,QAChE2G,MAAAA,EAAYhC,SAASU,cAAc,uBACnCuB,EAAcjC,SAASC,cAAc,MAC3CgC,EAAY1I,GAAK,oBAAsBL,EAAE1D,OACzCyM,EAAY/B,UAAUC,IAAI,qBACpBlI,MAAAA,EAAO+H,SAASC,cAAc,QACpChI,EAAKiI,UAAUC,IAAI,kBACnBlI,EAAKqI,YAAcpH,EAAEjB,KAErBA,EAAK+I,iBAAiB,QAAS,KAC3BkB,EAAahJ,KAGXiJ,MAAAA,EAAenC,SAASC,cAAc,QAC5CkC,EAAajC,UAAUC,IAAI,eACrBiC,MAAAA,EAAMpC,SAASC,cAAc,KACnCmC,EAAIlC,UAAUC,IAAI,kBAClBiC,EAAIhC,aAAa,QAAS,UAC1BgC,EAAIxN,OAAOoL,SAASqC,eAAe,WAEnCD,EAAIpB,iBAAiB,QAAS,KAC1BhB,SAASsC,eAAe,oBAAsBpJ,EAAE1D,QAAQ+M,SACxDnG,EAAKzC,WAAWT,EAAE1D,QAElBoG,aAAaW,QAAQ,8BAA+Bb,KAAKc,UAAUiD,EAAGpE,UAE1E8G,EAAa5B,YAAY6B,GACzBH,EAAY1B,YAAYtI,GACxBgK,EAAY1B,YAAY4B,GACxBH,EAAUzB,YAAY0B,GAK1BC,EAAahJ,KAEjB2I,EAAQ3B,UAAUC,IAAI,YACtByB,EAAQrB,YAAYsB,GACpBR,EAAed,YAAYqB,KAInC5B,SAASU,cAAc,iBAAiBJ,YAAc,iBAAmBb,EAAGF,aAIzE,eAAeiD,EAAU/C,GACtBgD,MAAAA,EAAiBzC,SAASU,cAAc,oBAC9C+B,EAAehC,UAAY,GAErBiC,MAAAA,EAAW1C,SAASC,cAAc,OACxCyC,EAASxC,UAAUC,IAAI,sBACjBwC,MAAAA,EAAQ3C,SAASC,cAAc,QACrC0C,EAAMrC,YAAc,WACpBoC,EAASnC,YAAYoC,GACrBF,EAAelC,YAAYmC,GAErBE,MAAAA,EAAmB5C,SAASC,cAAc,UAChD2C,EAAiB1C,UAAUC,IAAI,sBAAuB,UACtDyC,EAAiBrJ,GAAK,qBACtBqJ,EAAiBnC,UAAY,WAE7BmC,EAAiB5B,iBAAiB,QAAS,KACjC5E,MAAAA,EAAO,IAAIvD,EAAJ,KACb4G,EAAGN,QAAQ/C,GAEXR,aAAaW,QAAQ,8BAA+Bb,KAAKc,UAAUiD,EAAGpE,QAChEwH,MAAAA,EAAU7C,SAASC,cAAc,OACvC4C,EAAQ3C,UAAUC,IAAI,gBACtB0C,EAAQtJ,GAAK6C,EAAK7C,GACZuJ,MAAAA,EAAY9C,SAASC,cAAc,QACzC6C,EAAU5C,UAAUC,IAAI,sBACxB2C,EAAUxC,YAAclE,EAAKnE,KAE7B6K,EAAU9B,iBAAiB,QAAS,KAChCvB,EAAGrE,WAAagB,EAAK7C,GACrBwJ,EAAetD,KAGb0C,MAAAA,EAAenC,SAASC,cAAc,QAC5CkC,EAAajC,UAAUC,IAAI,eACrBiC,MAAAA,EAAMpC,SAASC,cAAc,KACnCmC,EAAIlC,UAAUC,IAAI,kBAClBiC,EAAIhC,aAAa,QAAS,UAC1BgC,EAAIxN,OAAOoL,SAASqC,eAAe,WAEnCD,EAAIpB,iBAAiB,QAAS,KAC1BhB,SAASsC,eAAelG,EAAK7C,IAAIgJ,SACjC9C,EAAGL,WAAWhD,EAAK7C,IAEnBqC,aAAaW,QAAQ,8BAA+Bb,KAAKc,UAAUiD,EAAGpE,UAE1E8G,EAAa5B,YAAY6B,GAEzBS,EAAQtC,YAAYuC,GACpBD,EAAQtC,YAAY4B,GACpBM,EAAeO,aAAaH,EAASD,KAGzCnD,EAAGpE,MAAMa,QAAQE,IACPyG,MAAAA,EAAU7C,SAASC,cAAc,OACvC4C,EAAQ3C,UAAUC,IAAI,gBACtB0C,EAAQtJ,GAAK6C,EAAK7C,GACZuJ,MAAAA,EAAY9C,SAASC,cAAc,QACzC6C,EAAU5C,UAAUC,IAAI,sBACxB2C,EAAUxC,YAAclE,EAAKnE,KAC7B6K,EAAU9B,iBAAiB,QAAS,KAChCvB,EAAGrE,WAAagB,EAAK7C,GACrBwJ,EAAetD,KAEb0C,MAAAA,EAAenC,SAASC,cAAc,QAC5CkC,EAAajC,UAAUC,IAAI,eACrBiC,MAAAA,EAAMpC,SAASC,cAAc,KACnCmC,EAAIlC,UAAUC,IAAI,kBAClBiC,EAAIhC,aAAa,QAAS,UAC1BgC,EAAIxN,OAAOoL,SAASqC,eAAe,WACnCD,EAAIpB,iBAAiB,QAAS,KAC1BhB,SAASsC,eAAelG,EAAK7C,IAAIgJ,SACjC9C,EAAGL,WAAWhD,EAAK7C,IACnBqC,aAAaW,QAAQ,8BAA+Bb,KAAKc,UAAUiD,EAAGpE,UAE1E8G,EAAa5B,YAAY6B,GAEzBS,EAAQtC,YAAYuC,GACpBD,EAAQtC,YAAY4B,GACpBM,EAAelC,YAAYsC,KAE/BJ,EAAelC,YAAYqC,GAI/B,SAASG,EAAetD,GACdgD,MAAAA,EAAiBzC,SAASU,cAAc,oBAC9C+B,EAAehC,UAAY,GAErBrE,MAAAA,EAAOqD,EAAGP,QAAQO,EAAGrE,YAErBsH,EAAW1C,SAASC,cAAc,OACxCyC,EAASxC,UAAUC,IAAI,sBACjBwC,MAAAA,EAAQ3C,SAASC,cAAc,QAErC0C,EAAMM,iBAAkB,EACxBN,EAAMzC,UAAUC,IAAI,WAAY,mBAChCwC,EAAMrC,YAAclE,EAAKnE,KACzByK,EAASnC,YAAYoC,GAErBA,EAAM3B,iBAAiB,WAAYC,IAC3BA,EAAMC,OAAOZ,cACblE,EAAKnE,KAAOgJ,EAAMC,OAAOZ,YAAY4C,UAAU,EAAG,IAAIjK,QAAQ,eAAgB,KAElF0J,EAAMrC,YAAclE,EAAKnE,KACzB2D,aAAaW,QAAQ,8BAA+Bb,KAAKc,UAAUiD,EAAGpE,UAE1EoH,EAAelC,YAAYmC,GACrBS,MAAAA,EAAuBnD,SAASC,cAAc,OAC9CpG,EAAcmG,SAASC,cAAc,MAC3CpG,EAAYN,GAAK,qBACjBM,EAAYqG,UAAUC,IAAI,sBAE1B/D,EAAK5C,MAAM0C,QAAQzG,IACTwM,MAAAA,EAAcjC,SAASC,cAAc,MAC3CgC,EAAY1I,GAAK,oBAAsB9D,EAAKD,OAC5CyM,EAAY/B,UAAUC,IAAI,qBACpBlI,MAAAA,EAAO+H,SAASC,cAAc,QACpChI,EAAKiI,UAAUC,IAAI,kBACnBlI,EAAKqI,YAAc7K,EAAKwC,KAExBA,EAAK+I,iBAAiB,QAAS,KAC3BkB,EAAazM,KAGX0M,MAAAA,EAAenC,SAASC,cAAc,QAC5CkC,EAAajC,UAAUC,IAAI,eACrBiC,MAAAA,EAAMpC,SAASC,cAAc,KACnCmC,EAAIlC,UAAUC,IAAI,kBAClBiC,EAAIhC,aAAa,QAAS,UAC1BgC,EAAIxN,OAAOoL,SAASqC,eAAe,WACnCD,EAAIpB,iBAAiB,QAAS,KAC1BhB,SAASsC,eAAe,oBAAsB7M,EAAKD,QAAQ+M,SAC3DnG,EAAKzC,WAAWlE,EAAKD,QACrBoG,aAAaW,QAAQ,8BAA+Bb,KAAKc,UAAUiD,EAAGpE,UAE1E8G,EAAa5B,YAAY6B,GACzBH,EAAY1B,YAAYtI,GACxBgK,EAAY1B,YAAY4B,GACxBtI,EAAY0G,YAAY0B,KAE5BkB,EAAqB5C,YAAY1G,GACjC4I,EAAelC,YAAY4C,GAErBC,MAAAA,EAAapD,SAASC,cAAc,OACpCoD,EAAWrD,SAASC,cAAc,UACxCoD,EAASnD,UAAUC,IAAI,sBAAuB,UAC9CkD,EAAS9J,GAAK,mBACd8J,EAAS5C,UAAY,OACrB4C,EAASrC,iBAAiB,QAAS,KAC/BvB,EAAGrE,gBAAajE,EAChBqL,EAAU/C,KAEd2D,EAAW7C,YAAY8C,GACvBZ,EAAelC,YAAY6C,GAIxB,SAASlB,EAAazM,GACnB6N,MAAAA,EAAoBtD,SAASU,cAAc,cACjD4C,EAAkB7C,UAAY,GAExBiC,MAAAA,EAAW1C,SAASC,cAAc,OACxCyC,EAASxC,UAAUC,IAAI,mBACjBwC,MAAAA,EAAQ3C,SAASC,cAAc,QACrC0C,EAAMrC,YAAc,YACpBoC,EAASnC,YAAYoC,GACrBW,EAAkB/C,YAAYmC,GAG9B5F,OAAOC,QAAQtH,EAAKkD,oBAAoBuD,QAAQ,EAAEc,EAAGC,MAC3CsG,MAAAA,EAAavD,SAASC,cAAc,OAC1CsD,EAAWrD,UAAUC,IAAI,sBACzBoD,EAAW9C,UAAY,wBAA0BzD,EAAI,YAAcC,EACnEqG,EAAkB/C,YAAYgD;;ACpUtC,aAJA,IAAA,EAAA,QAAA,kBAEA,EAAA,QAAA,iBAEA,WACU9D,MAAAA,QAAW,EAAjB,EAAA,gBACM,EAAYA,EAAAA,aAAAA,SACZ,EAAUA,EAAAA,WAAAA,SACV,EAAiBA,EAAAA,kBAAAA,IACbA,EAAAA,EAAAA,WAAAA,GAEVrK,QAAQC,IAAIoK,IAPhB","file":"src.38915e5d.js","sourceRoot":"..\\src","sourcesContent":["export const ENDPOINTS = {\r\n    /* RapidAPI Hearthstone endpoints */\r\n    INFO: 'https://omgvamp-hearthstone-v1.p.rapidapi.com/info',\r\n    CARD_BY_ID: 'https://omgvamp-hearthstone-v1.p.rapidapi.com/cards/',\r\n    CARDS_BY_CLASS: 'https://omgvamp-hearthstone-v1.p.rapidapi.com/cards/classes/',\r\n    CARDS_BY_SET: 'https://omgvamp-hearthstone-v1.p.rapidapi.com/cards/sets/',\r\n    CARDS_BY_TYPE: 'https://omgvamp-hearthstone-v1.p.rapidapi.com/cards/types/',\r\n    CARDS_BY_FACTION: 'https://omgvamp-hearthstone-v1.p.rapidapi.com/cards/factions/',\r\n    CARDS_BY_QUALITY: 'https://omgvamp-hearthstone-v1.p.rapidapi.com/cards/qualities/',\r\n    CARDS_BY_RACE: 'https://omgvamp-hearthstone-v1.p.rapidapi.com/cards/races/',\r\n\r\n    /* RapidAPI Hearthstone call options */\r\n    // MODIFIERS: '?collectible=1',\r\n    MODIFIERS: '',\r\n\r\n    /* hearthstonejson images endpoints */\r\n    IMG: 'https://art.hearthstonejson.com/v1/render/latest/enUS/256x/'\r\n};","import { ENDPOINTS } from './endpoints';\r\n\r\nconst RAPID_API_HOST = 'omgvamp-hearthstone-v1.p.rapidapi.com';\r\nconst RAPID_API_KEY = 'f6fe973a55mshb2cdb6e42332b71p1b12ccjsndf391a414a74';\r\n\r\n/*\r\n * To make calls to RapidAPI endpoints\r\n */\r\nasync function getEndpoint(url) {\r\n    const headers = new Headers();\r\n    headers.append('x-rapidapi-host', RAPID_API_HOST);\r\n    headers.append('x-rapidapi-key', RAPID_API_KEY);\r\n    try {\r\n        const response = await fetch(url + ENDPOINTS.MODIFIERS, { method: 'GET', headers });\r\n        if (response.ok) {\r\n            const apiData = await response.json();\r\n            return apiData;\r\n        } else {\r\n            return response.ok;\r\n        }\r\n    } catch (err) {\r\n        console.log('fetch failed', err);\r\n    }\r\n}\r\n\r\nexport async function requestInfo() {\r\n    return await getEndpoint(ENDPOINTS.INFO);\r\n}\r\n\r\nexport async function requestCardByCardId(cardId) {\r\n    const card = await getEndpoint(ENDPOINTS.CARD_BY_ID + cardId);\r\n    return card.pop();\r\n}\r\n\r\nexport async function requestCardsByPlayerClass(playerClass) {\r\n    return await getEndpoint(ENDPOINTS.CARDS_BY_CLASS + playerClass);\r\n}\r\n\r\nexport async function requestCardsByCardSet(cardSet) {\r\n    return await getEndpoint(ENDPOINTS.CARDS_BY_SET + cardSet);\r\n}\r\n\r\nexport async function requestCardsByType(type) {\r\n    return await getEndpoint(ENDPOINTS.CARDS_BY_TYPE + type);\r\n}\r\n\r\nexport async function requestCardsByFaction(faction) {\r\n    return await getEndpoint(ENDPOINTS.CARDS_BY_FACTION + faction);\r\n}\r\n\r\nexport async function requestCardsByRarity(rarity) {\r\n    return await getEndpoint(ENDPOINTS.CARDS_BY_QUALITY + rarity);\r\n}\r\n\r\nexport async function requestCardsByRace(race) {\r\n    return await getEndpoint(ENDPOINTS.CARDS_BY_RACE + race);\r\n}","import { ENDPOINTS } from '../utils/endpoints';\r\n\r\nexport class Card {\r\n    constructor(cardId, cardSet, type, faction, rarity, race, playerClass) {\r\n        /* Basic attributes */\r\n        this._cardId = cardId;\r\n        this._cardSet = cardSet;\r\n        this._type = type;\r\n        this._faction = faction;\r\n        this._rarity = rarity;\r\n        this._race = race;\r\n        this._img = this._buildImgUrl(cardId);\r\n        this._playerClass = playerClass;\r\n\r\n        /* Extended attributes */\r\n        this._name = undefined;\r\n        this._cost = undefined;\r\n        this._attack = undefined;\r\n        this._health = undefined;\r\n        this._text = undefined;\r\n        this._flavor = undefined;\r\n        this._artist = undefined;\r\n        this._collectible = undefined;\r\n        this._elite = undefined;\r\n        this._locale = undefined;\r\n        this._infoCompleted = false;\r\n    }\r\n\r\n    /* Builds img url based into endpoint info */\r\n    _buildImgUrl(cardId) {\r\n        return ENDPOINTS.IMG + cardId + '.png';\r\n    }\r\n\r\n    /* returns boolean if the card has all fields */\r\n    get infoCompleted() {\r\n        return this._infoCompleted;\r\n    }\r\n\r\n    set infoCompleted(infoCompleted) {\r\n        this._infoCompleted = infoCompleted;\r\n    }\r\n\r\n    get cardId() {\r\n        return this._cardId;\r\n    }\r\n\r\n    // set cardId(cardId) {\r\n    //     this._cardId = cardId;\r\n    // }\r\n\r\n    get playerClass() {\r\n        return this._playerClass;\r\n    }\r\n\r\n    // set playerClass(playerClass) {\r\n    //     this._playerClass = playerClass;\r\n    // }\r\n\r\n    get cardSet() {\r\n        return this._cardSet;\r\n    }\r\n\r\n    // set cardSet(cardSet) {\r\n    //     this._cardSet = cardSet;\r\n    // }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    // set type(type) {\r\n    //     this._type = type;\r\n    // }\r\n\r\n    get faction() {\r\n        return this._faction;\r\n    }\r\n\r\n    set faction(faction) {\r\n        this._faction = faction;\r\n    }\r\n\r\n    get rarity() {\r\n        return this._rarity;\r\n    }\r\n\r\n    set rarity(rarity) {\r\n        this._rarity = rarity;\r\n    }\r\n\r\n    get race() {\r\n        return this._race;\r\n    }\r\n\r\n    set race(race) {\r\n        this._race = race;\r\n    }\r\n\r\n    get img() {\r\n        return this._img;\r\n    }\r\n\r\n    set img(image) {\r\n        this._img = image;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(name) {\r\n        this._name = name;\r\n    }\r\n\r\n    get cost() {\r\n        return this._cost;\r\n    }\r\n\r\n    set cost(cost) {\r\n        this._cost = cost;\r\n    }\r\n\r\n    get attack() {\r\n        return this._attack;\r\n    }\r\n\r\n    set attack(attack) {\r\n        this._attack = attack;\r\n    }\r\n\r\n    get health() {\r\n        return this._health;\r\n    }\r\n\r\n    set health(health) {\r\n        this._health = health;\r\n    }\r\n\r\n    get text() {\r\n        return this._text;\r\n    }\r\n\r\n    set text(text) {\r\n        this._text = text;\r\n    }\r\n\r\n    get flavor() {\r\n        return this._flavor;\r\n    }\r\n\r\n    set flavor(flavor) {\r\n        this._flavor = flavor;\r\n    }\r\n\r\n    get artist() {\r\n        return this._artist;\r\n    }\r\n\r\n    set artist(artist) {\r\n        this._artist = artist;\r\n    }\r\n\r\n    get collectible() {\r\n        return this._collectible;\r\n    }\r\n\r\n    set collectible(collectible) {\r\n        this._collectible = collectible;\r\n    }\r\n\r\n    get elite() {\r\n        return this._elite;\r\n    }\r\n\r\n    set elite(elite) {\r\n        this._elite = elite;\r\n    }\r\n\r\n    get locale() {\r\n        return this._locale;\r\n    }\r\n\r\n    set locale(locale) {\r\n        this._locale = locale;\r\n    }\r\n\r\n    /* returns an object with all properties that have some value */\r\n    getAllProperties() {\r\n        const info = {};\r\n        if (this._cardId) info['Card id'] = this._cardId;\r\n        if (this._playerClass) info['Player class'] = this._playerClass;\r\n        if (this._cardSet) info['Card set'] = this._cardSet;\r\n        if (this._type) info['Type'] = this._type;\r\n        if (this._faction) info['Faction'] = this._faction;\r\n        if (this._rarity) info['Rarity'] = this._rarity;\r\n        if (this._race) info['Race'] = this._race;\r\n\r\n        if (this._name) info['Name'] = this._name;\r\n        if (this._cost) info['Cost'] = this._cost;\r\n        if (this._attack) info['Attack'] = this._attack;\r\n        if (this._health) info['Health'] = this._health;\r\n        if (this._text) info['Text'] = this._text;\r\n        if (this._flavor) info['Flavor'] = this._flavor;\r\n        if (this._artist) info['Artist'] = this._artist;\r\n        if (this._elite) info['Elite'] = this._elite;\r\n\r\n        return info;\r\n    }\r\n}","export class Deck {\r\n    constructor() {\r\n        this._id = this._uuidv4();\r\n        this._name = 'New deck';\r\n        this._cards = [];\r\n    }\r\n\r\n    _uuidv4() {\r\n        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\r\n            (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\r\n        );\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(name) {\r\n        this._name = name;\r\n    }\r\n\r\n    get cards() {\r\n        return this._cards;\r\n    }\r\n\r\n    addCard(card) {\r\n        this._cards.push(card);\r\n    }\r\n\r\n    removeCard(cardId) {\r\n        this._cards = this._cards.filter(cardsInDeck => cardsInDeck.cardId !== cardId);\r\n    }\r\n\r\n    get nCards() {\r\n        return this._cards.length;\r\n    }\r\n}","import {\r\n    requestCardByCardId,\r\n    requestCardsByPlayerClass,\r\n    requestCardsByCardSet,\r\n    requestCardsByType,\r\n    requestCardsByFaction,\r\n    requestCardsByRarity,\r\n    requestCardsByRace\r\n} from '../utils/api';\r\nimport { Card } from '../Classes/Card';\r\nimport { Deck } from './Deck';\r\n\r\nexport class DeckBuilder {\r\n    constructor(playerClasses, cardSets, types, factions, rarities, races, patch) {\r\n        /* To store the general info of the game (filters and patch) */\r\n        this._playerClasses = playerClasses;\r\n        this._cardSets = cardSets;\r\n        this._types = types;\r\n        this._factions = factions;\r\n        this._rarities = rarities;\r\n        this._races = races;\r\n        this._patch = patch;\r\n\r\n        /* Cards already pulled from endpoint and stored locally */\r\n        this._cardsCache = [];\r\n        this._cardsNoImageCache = []; // not used now but who knows...\r\n\r\n        /* To keep the calls already done to endpoints */\r\n        this._callsDone = {\r\n            cardId: [],\r\n            playerClass: [],\r\n            cardSet: [],\r\n            type: [],\r\n            faction: [],\r\n            rarity: [],\r\n            race: []\r\n        };\r\n\r\n        /* To store the cards shown in the middle of the screen */\r\n        this._cardsShown = [];\r\n\r\n        /* To store the cards that are included in the deck probably*/\r\n        this._decks = {\r\n            /* active deck */\r\n            activeDeck: undefined,\r\n            /* all decks */\r\n            decks: []\r\n        };\r\n\r\n        /* To keep track the filters aplied to cardsShown */\r\n        this._filtersObject = {\r\n            filtersApplied: {\r\n                playerClass: false,\r\n                cardSet: false,\r\n                type: false,\r\n                faction: false,\r\n                rarity: false,\r\n                race: false\r\n            },\r\n            /* first filter applied to avoid unnecessary calls */\r\n            firstFilter: undefined\r\n        };\r\n\r\n        /* retrieve info stored in browser if available */\r\n        this._getBrowserInfo();\r\n    }\r\n\r\n    /* retrieve info stored into the browser */\r\n    _getBrowserInfo() {\r\n        /* if we are in the same patch means nothing changed so we can retrieve info securely */\r\n        if (JSON.parse(localStorage.getItem('HearthstoneDeckBuilderPatch')) === this._patch) {\r\n            // console.log('Same patch, load resources from browser if any');\r\n            const browserDecks = JSON.parse(localStorage.getItem('HearthstoneDeckBuilderDecks'));\r\n            const browserCallsDone = JSON.parse(localStorage.getItem('HearthstoneDeckBuilderCallsDone'));\r\n            const browserCardsNoImageCache = JSON.parse(\r\n                localStorage.getItem('HearthstoneDeckBuilderCardsNoImageCache')\r\n            );\r\n            const browserCardsCache = JSON.parse(\r\n                localStorage.getItem('HearthstoneDeckBuilderCardsCache')\r\n            );\r\n\r\n            /* info about calls done and cached cards */\r\n            if (browserCallsDone && browserCardsCache && browserCardsNoImageCache) {\r\n                /* retrieve calls done */\r\n                this._callsDone = browserCallsDone;\r\n\r\n                /* retrieve cards cache, we have to create new objects because getters and setters are not saved */\r\n                browserCardsCache.forEach(card => {\r\n                    const newCard = new Card(\r\n                        card._cardId,\r\n                        card._cardSet,\r\n                        card._type,\r\n                        card._faction,\r\n                        card._rarity,\r\n                        card._race,\r\n                        card._playerClass\r\n                    );\r\n\r\n                    newCard.name = card._name;\r\n                    newCard.cost = card._cost;\r\n                    newCard.attack = card._attack;\r\n                    newCard.health = card._health;\r\n                    newCard.text = card._text;\r\n                    newCard.flavor = card._flavor;\r\n                    newCard.artist = card._artist;\r\n                    newCard.collectible = card._collectible;\r\n                    newCard.elite = card._elite;\r\n                    newCard.locale = card._locale;\r\n                    newCard.infoCompleted = card._infoCompleted;\r\n\r\n                    this._cardsCache.push(newCard);\r\n                });\r\n\r\n                /* same with cards without image */\r\n                browserCardsNoImageCache.forEach(card => {\r\n                    const newCard = new Card(\r\n                        card._cardId,\r\n                        card._cardSet,\r\n                        card._type,\r\n                        card._faction,\r\n                        card._rarity,\r\n                        card._race,\r\n                        card._playerClass\r\n                    );\r\n                    newCard.img = 'no-img-available';\r\n                    newCard.name = card._name;\r\n                    newCard.cost = card._cost;\r\n                    newCard.attack = card._attack;\r\n                    newCard.health = card._health;\r\n                    newCard.text = card._text;\r\n                    newCard.flavor = card._flavor;\r\n                    newCard.artist = card._artist;\r\n                    newCard.collectible = card._collectible;\r\n                    newCard.elite = card._elite;\r\n                    newCard.locale = card._locale;\r\n                    newCard.infoCompleted = card._infoCompleted;\r\n                    this._cardsNoImageCache.push(newCard);\r\n                });\r\n\r\n                /* if info about decks */\r\n                if (browserDecks) {\r\n                    /* for each deck get his info and create new Deck objects to populate this._decks object */\r\n                    for (const deck of browserDecks) {\r\n                        const newDeck = new Deck();\r\n                        newDeck.name = deck._name;\r\n                        for (const card of deck._cards) {\r\n                            const newCard = this._cardsCache.find(c => c.cardId === card._cardId);\r\n                            newDeck.addCard(newCard);\r\n                        }\r\n                        this._decks.decks.push(newDeck);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            /* in case of new patch delete all old info */\r\n            localStorage.setItem('HearthstoneDeckBuilderPatch', JSON.stringify(this._patch));\r\n            localStorage.removeItem('HearthstoneDeckBuilderCallsDone');\r\n            localStorage.removeItem('HearthstoneDeckBuilderDecks');\r\n            localStorage.removeItem('HearthstoneDeckBuilderCardsNoImageCache');\r\n            localStorage.removeItem('HearthstoneDeckBuilderCardsCache');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rebuild the cards shown array accordingly to the filters we have and the new filter applied\r\n     */\r\n    async _rebuildCardsShownArray(filterKey, filterValue) {\r\n        /* change the filter */\r\n        this._filtersObject.filtersApplied[filterKey] = filterValue;\r\n\r\n        /* change first filter  */\r\n        /* if no first filter means that first option in the chain was unset */\r\n        if (!this._filtersObject.firstFilter) {\r\n            let filterWithCallDoneFound = false;\r\n            /* in that case search for a new filter applied with a call to the API done */\r\n            Object.entries(this._filtersObject.filtersApplied).forEach(([k, v]) => {\r\n                /* if filter is different from the filter we are modifying or removing and has value (is applied) */\r\n                if (k !== filterKey && v !== false) {\r\n                    /* if no filter with call to the API found */\r\n                    if (!filterWithCallDoneFound) {\r\n                        /* set that filter as a first filter */\r\n                        this._filtersObject.firstFilter = k;\r\n                        /* if the filter has a call to the API done. Don't allow bucle to modifiy first filter anymore.\r\n                         * That means that the new chain of filters will start with a filter with a call to the API done\r\n                         * and it will be unnecessary do more calls to the API.\r\n                         * If filter with a call done is not found the call will be unavoidable*/\r\n                        if (this._callsDone[k].find(call => call === v)) filterWithCallDoneFound = true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        /* reset the cardsshown array */\r\n        this._cardsShown = [];\r\n\r\n        /* if we have first filter proceed. In the case that first filter was undefined means that all filters are removed\r\n         * and no cards has to be shown */\r\n        if (this._filtersObject.firstFilter) {\r\n            /* get an array with all filters that have to be applied */\r\n            const newFiltersArray = Object.entries(this._filtersObject.filtersApplied).filter(\r\n                filter => filter[1] !== false\r\n            );\r\n\r\n            /* search in that array if some filter has his call to the API done. */\r\n            const filterWithCallDoneFound = newFiltersArray.find(\r\n                ([k]) => k === this._filtersObject.firstFilter\r\n            );\r\n\r\n            /* if some filter with call done is found put it in the begining of the array so\r\n             * the new filters chain starts with it. */\r\n            if (filterWithCallDoneFound) {\r\n                newFiltersArray.splice(newFiltersArray.indexOf(filterWithCallDoneFound), 1);\r\n                newFiltersArray.unshift(filterWithCallDoneFound);\r\n            }\r\n\r\n            if (newFiltersArray && this.someFilterApplied) {\r\n                let cardsAlreadyGotFromCache = false;\r\n                /* for each filter applied */\r\n                for (const filter of newFiltersArray) {\r\n                    const k = filter[0];\r\n                    const v = filter[1];\r\n\r\n                    if (v !== false) {\r\n                        /* if no cards shown and cards not get from cache for first time */\r\n                        if (this._cardsShown.length === 0 && !cardsAlreadyGotFromCache) {\r\n                            /* if call to the API not done make the call. This is necessary if we are removing the first filter and\r\n                             * the second one don't have the call done */\r\n                            if (!this._callsDone[k].find(e => e === v)) {\r\n                                let cardsRetrieved;\r\n                                /* make the call to the API */\r\n                                switch (k) {\r\n                                    case 'playerClass':\r\n                                        cardsRetrieved = await requestCardsByPlayerClass(v);\r\n                                        this._callsDone.playerClass.push(v);\r\n                                        break;\r\n                                    case 'cardSet':\r\n                                        cardsRetrieved = await requestCardsByCardSet(v);\r\n                                        this._callsDone.cardSet.push(v);\r\n                                        break;\r\n                                    case 'type':\r\n                                        cardsRetrieved = await requestCardsByType(v);\r\n                                        this._callsDone.type.push(v);\r\n                                        break;\r\n                                    case 'faction':\r\n                                        cardsRetrieved = await requestCardsByFaction(v);\r\n                                        this._callsDone.faction.push(v);\r\n                                        break;\r\n                                    case 'rarity':\r\n                                        cardsRetrieved = await requestCardsByRarity(v);\r\n                                        this._callsDone.rarity.push(v);\r\n                                        break;\r\n                                    case 'race':\r\n                                        cardsRetrieved = await requestCardsByRace(v);\r\n                                        this._callsDone.race.push(v);\r\n                                        break;\r\n                                }\r\n                                /* update the cache */\r\n                                if (cardsRetrieved) {\r\n                                    cardsRetrieved.forEach(e => {\r\n                                        const cachedCard = this._cardsCache.find(card => card.cardId === e.cardId);\r\n                                        if (!cachedCard) {\r\n                                            this._cardsCache.push(\r\n                                                new Card(\r\n                                                    e.cardId,\r\n                                                    e.cardSet,\r\n                                                    e.type,\r\n                                                    e.faction,\r\n                                                    e.rarity,\r\n                                                    e.race,\r\n                                                    e.playerClass\r\n                                                )\r\n                                            );\r\n                                        }\r\n                                    });\r\n                                }\r\n                                /* after call to API save info from cache and calls done */\r\n                                localStorage.setItem(\r\n                                    'HearthstoneDeckBuilderCallsDone',\r\n                                    JSON.stringify(this._callsDone)\r\n                                );\r\n                                localStorage.setItem(\r\n                                    'HearthstoneDeckBuilderCardsNoImageCache',\r\n                                    JSON.stringify(this._cardsNoImageCache)\r\n                                );\r\n                                localStorage.setItem(\r\n                                    'HearthstoneDeckBuilderCardsCache',\r\n                                    JSON.stringify(this._cardsCache)\r\n                                );\r\n                            }\r\n\r\n                            /* get the cards shown from cache */\r\n                            this._cardsShown = this._cardsCache.filter(c => c[k] === v);\r\n                            /* To prevent the case that some combination of filters result in an empty cardsShown array\r\n                             * and the program get cards from cardsCache again.\r\n                             */\r\n                            cardsAlreadyGotFromCache = true;\r\n                        } else {\r\n                            /* all secondary filters will come here to apply more filters to cards shown */\r\n                            this._cardsShown = this._cardsShown.filter(c => c[k] === v);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //TO_DO\r\n        //this._cardsShown.sort();\r\n    }\r\n\r\n    /**\r\n     * Apply filter by player class to cards shown property of deck builder\r\n     */\r\n    async _applyPlayerClassFilter(playerClass) {\r\n        /* retrieve cards from endpoint and populate cache if not done earlier and if not first filter applied */\r\n        if (!this._callsDone.playerClass.find(e => e === playerClass) &&\r\n            !this._filtersObject.firstFilter\r\n        ) {\r\n            const cardsByPlayerClass = await requestCardsByPlayerClass(playerClass);\r\n            if (cardsByPlayerClass) {\r\n                cardsByPlayerClass.forEach(e => {\r\n                    const cachedCard = this._cardsCache.find(card => card.cardId === e.cardId);\r\n                    if (!cachedCard) {\r\n                        this._cardsCache.push(\r\n                            new Card(e.cardId, e.cardSet, e.type, e.faction, e.rarity, e.race, e.playerClass)\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n            this._callsDone.playerClass.push(playerClass);\r\n        }\r\n\r\n        if (!this._filtersObject.firstFilter) this._filtersObject.firstFilter = 'playerClass';\r\n\r\n        /* rebuild the cards shown array */\r\n        await this._rebuildCardsShownArray('playerClass', playerClass);\r\n    }\r\n\r\n    /**\r\n     * Apply filter by card set to cards shown property of deck builder\r\n     */\r\n    async _applyCardSetFilter(cardSet) {\r\n        if (!this._callsDone.cardSet.find(e => e === cardSet) && !this._filtersObject.firstFilter) {\r\n            const cardsByCardSet = await requestCardsByCardSet(cardSet);\r\n            if (cardsByCardSet) {\r\n                cardsByCardSet.forEach(e => {\r\n                    const cachedCard = this._cardsCache.find(card => card.cardId === e.cardId);\r\n                    if (!cachedCard) {\r\n                        this._cardsCache.push(\r\n                            new Card(e.cardId, e.cardSet, e.type, e.faction, e.rarity, e.race, e.playerClass)\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n\r\n            this._callsDone.cardSet.push(cardSet);\r\n        }\r\n\r\n        if (!this._filtersObject.firstFilter) this._filtersObject.firstFilter = 'cardSet';\r\n\r\n        /* rebuild the cards shown array */\r\n        await this._rebuildCardsShownArray('cardSet', cardSet);\r\n    }\r\n\r\n    /**\r\n     * Apply filter by type to cards shown property of deck builder\r\n     */\r\n    async _applyTypeFilter(type) {\r\n        if (!this._callsDone.type.find(e => e === type) && !this._filtersObject.firstFilter) {\r\n            const cardsByType = await requestCardsByType(type);\r\n            if (cardsByType) {\r\n                cardsByType.forEach(e => {\r\n                    const cachedCard = this._cardsCache.find(card => card.cardId === e.cardId);\r\n                    if (!cachedCard) {\r\n                        this._cardsCache.push(\r\n                            new Card(e.cardId, e.cardSet, e.type, e.faction, e.rarity, e.race, e.playerClass)\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n\r\n            this._callsDone.type.push(type);\r\n        }\r\n\r\n        if (!this._filtersObject.firstFilter) this._filtersObject.firstFilter = 'type';\r\n\r\n        await this._rebuildCardsShownArray('type', type);\r\n    }\r\n\r\n    /**\r\n     * Apply filter by faction to cards shown property of deck builder\r\n     */\r\n    async _applyFactionFilter(faction) {\r\n        if (!this._callsDone.faction.find(e => e === faction) && !this._filtersObject.firstFilter) {\r\n            const cardsByFaction = await requestCardsByFaction(faction);\r\n\r\n            if (cardsByFaction) {\r\n                cardsByFaction.forEach(e => {\r\n                    const cachedCard = this._cardsCache.find(card => card.cardId === e.cardId);\r\n                    if (!cachedCard) {\r\n                        this._cardsCache.push(\r\n                            new Card(e.cardId, e.cardSet, e.type, e.faction, e.rarity, e.race, e.playerClass)\r\n                        );\r\n                    } else {\r\n                        this._cardsCache.find(c => c.cardId === cachedCard.cardId).faction = e.faction;\r\n                    }\r\n                });\r\n            }\r\n\r\n            this._callsDone.faction.push(faction);\r\n        }\r\n\r\n        if (!this._filtersObject.firstFilter) this._filtersObject.firstFilter = 'faction';\r\n\r\n        await this._rebuildCardsShownArray('faction', faction);\r\n    }\r\n\r\n    /**\r\n     * Apply filter by rarity to cards shown property of deck builder\r\n     */\r\n    async _applyRarityFilter(rarity) {\r\n        if (!this._callsDone.rarity.find(e => e === rarity) && !this._filtersObject.firstFilter) {\r\n            const cardsByRarity = await requestCardsByRarity(rarity);\r\n            if (cardsByRarity) {\r\n                cardsByRarity.forEach(e => {\r\n                    const cachedCard = this._cardsCache.find(card => card.cardId === e.cardId);\r\n                    if (!cachedCard) {\r\n                        this._cardsCache.push(\r\n                            new Card(e.cardId, e.cardSet, e.type, e.faction, e.rarity, e.race, e.playerClass)\r\n                        );\r\n                    } else {\r\n                        this._cardsCache.find(c => c.cardId === cachedCard.cardId).rarity = e.rarity;\r\n                    }\r\n                });\r\n            }\r\n\r\n            this._callsDone.rarity.push(rarity);\r\n        }\r\n\r\n        if (!this._filtersObject.firstFilter) this._filtersObject.firstFilter = 'rarity';\r\n\r\n        await this._rebuildCardsShownArray('rarity', rarity);\r\n    }\r\n\r\n    /**\r\n     * Apply filter by race to cards shown property of deck builder\r\n     */\r\n    async _applyRaceFilter(race) {\r\n        if (!this._callsDone.race.find(e => e === race) && !this._filtersObject.firstFilter) {\r\n            const cardsByRace = await requestCardsByRace(race);\r\n            if (cardsByRace) {\r\n                cardsByRace.forEach(e => {\r\n                    const cachedCard = this._cardsCache.find(card => card.cardId === e.cardId);\r\n                    if (!cachedCard) {\r\n                        this._cardsCache.push(\r\n                            new Card(e.cardId, e.cardSet, e.type, e.faction, e.rarity, e.race, e.playerClass)\r\n                        );\r\n                    } else {\r\n                        this._cardsCache.find(c => c.cardId === cachedCard.cardId).race = e.race;\r\n                    }\r\n                });\r\n            }\r\n\r\n            this._callsDone.race.push(race);\r\n        }\r\n\r\n        if (!this._filtersObject.firstFilter) this._filtersObject.firstFilter = 'race';\r\n        await this._rebuildCardsShownArray('race', race);\r\n    }\r\n\r\n    /* get just one card from API */\r\n    async getCardByCardId(cardId) {\r\n        const cachedCard = this._cardsCache.find(card => card.cardId === cardId);\r\n        if (cachedCard && cachedCard.infoCompleted) {\r\n            return cachedCard;\r\n        } else {\r\n            const rawCard = await requestCardByCardId(cardId);\r\n            if (rawCard) {\r\n                const cachedCard = this._cardsCache.find(card => card.cardId === rawCard.cardId);\r\n                /* if no cached card create new object */\r\n                if (!cachedCard) {\r\n                    const card = new Card(\r\n                        rawCard.cardId,\r\n                        rawCard.cardSet,\r\n                        rawCard.type,\r\n                        rawCard.faction,\r\n                        rawCard.rarity,\r\n                        rawCard.race,\r\n                        rawCard.playerClass\r\n                    );\r\n\r\n                    card.name = rawCard.name;\r\n                    card.cost = rawCard.cost;\r\n                    card.attack = rawCard.attack;\r\n                    card.health = rawCard.health;\r\n                    card.text = rawCard.text;\r\n                    card.flavor = rawCard.flavor;\r\n                    card.artist = rawCard.artist;\r\n                    card.collectible = rawCard.collectibl;\r\n                    card.elite = rawCard.elite;\r\n                    card.locale = rawCard.locale;\r\n                    card.infoCompleted = true;\r\n\r\n                    this._cardsCache.push(card);\r\n                    localStorage.setItem(\r\n                        'HearthstoneDeckBuilderCardsCache',\r\n                        JSON.stringify(this._cardsCache)\r\n                    );\r\n                    return card;\r\n                    /* if cached update element */\r\n                } else {\r\n                    cachedCard.faction = rawCard.faction;\r\n                    cachedCard.rarity = rawCard.rarity;\r\n                    cachedCard.race = rawCard.race;\r\n                    cachedCard.name = rawCard.name;\r\n                    cachedCard.cost = rawCard.cost;\r\n                    cachedCard.attack = rawCard.attack;\r\n                    cachedCard.health = rawCard.health;\r\n                    cachedCard.text = rawCard.text;\r\n                    cachedCard.flavor = rawCard.flavor;\r\n                    cachedCard.artist = rawCard.artist;\r\n                    cachedCard.collectible = rawCard.collectibl;\r\n                    cachedCard.elite = rawCard.elite;\r\n                    cachedCard.locale = rawCard.locale;\r\n                    cachedCard.infoCompleted = true;\r\n                    localStorage.setItem(\r\n                        'HearthstoneDeckBuilderCardsCache',\r\n                        JSON.stringify(this._cardsCache)\r\n                    );\r\n                    return cachedCard;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generic function to Apply filter  to cards shown property of deck builder\r\n     */\r\n    async applyFilter(key, filter) {\r\n        switch (key) {\r\n            case 'playerClass':\r\n                await this._applyPlayerClassFilter(filter);\r\n                break;\r\n            case 'cardSet':\r\n                await this._applyCardSetFilter(filter);\r\n                break;\r\n            case 'type':\r\n                await this._applyTypeFilter(filter);\r\n                break;\r\n            case 'faction':\r\n                await this._applyFactionFilter(filter);\r\n                break;\r\n            case 'rarity':\r\n                await this._applyRarityFilter(filter);\r\n                break;\r\n            case 'race':\r\n                await this._applyRaceFilter(filter);\r\n                break;\r\n            default:\r\n                return -1;\r\n        }\r\n\r\n        /* after apply filter save info from cache and calls done */\r\n        localStorage.setItem('HearthstoneDeckBuilderCallsDone', JSON.stringify(this._callsDone));\r\n        localStorage.setItem(\r\n            'HearthstoneDeckBuilderCardsNoImageCache',\r\n            JSON.stringify(this._cardsNoImageCache)\r\n        );\r\n        localStorage.setItem('HearthstoneDeckBuilderCardsCache', JSON.stringify(this._cardsCache));\r\n\r\n        return this._cardsShown;\r\n    }\r\n\r\n    /**\r\n     * Generic function to remove filter to cards shown property of deck builder\r\n     */\r\n    async removeFilter(filterKey) {\r\n        /* If filter applied */\r\n        if (this._filtersObject.filtersApplied[filterKey]) {\r\n            /* rebuild cards shown array */\r\n            if (this._filtersObject.firstFilter === filterKey) {\r\n                this._filtersObject.firstFilter = undefined;\r\n            }\r\n            await this._rebuildCardsShownArray(filterKey, false);\r\n        }\r\n    }\r\n\r\n    /* cards with no image are moved to the cards no image cache. Now it is unused but who knows.\r\n     * That function is launched when an image fires onerror event */\r\n    cardWithNoImg(cardWithNoImg) {\r\n        this._cardsShown = this._cardsShown.filter(card => card.cardId !== cardWithNoImg.cardId);\r\n        this._cardsCache = this._cardsCache.filter(card => card.cardId !== cardWithNoImg.cardId);\r\n        cardWithNoImg.img = 'no-img-available';\r\n        this._cardsNoImageCache.push(cardWithNoImg);\r\n        localStorage.setItem(\r\n            'HearthstoneDeckBuilderCardsNoImageCache',\r\n            JSON.stringify(this._cardsNoImageCache)\r\n        );\r\n        localStorage.setItem('HearthstoneDeckBuilderCardsCache', JSON.stringify(this._cardsCache));\r\n    }\r\n\r\n    someFilterApplied() {\r\n        if (this._filtersObject.firstFilter) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* to draw filters */\r\n    getSelectors() {\r\n        return {\r\n            playerClass: {\r\n                text: 'player classes',\r\n                arr: this._playerClasses\r\n            },\r\n            cardSet: {\r\n                text: 'card sets',\r\n                arr: this._cardSets\r\n            },\r\n            type: {\r\n                text: 'types',\r\n                arr: this._types\r\n            },\r\n            faction: {\r\n                text: 'factions',\r\n                arr: this._factions\r\n            },\r\n            rarity: {\r\n                text: 'rarities',\r\n                arr: this._rarities\r\n            },\r\n            race: {\r\n                text: 'races',\r\n                arr: this._races\r\n            }\r\n        };\r\n    }\r\n\r\n    get playerClasses() {\r\n        return this._playerClasses;\r\n    }\r\n\r\n    get cardSets() {\r\n        return this._cardSets;\r\n    }\r\n\r\n    get types() {\r\n        return this._types;\r\n    }\r\n\r\n    get factions() {\r\n        return this._factions;\r\n    }\r\n\r\n    get rarities() {\r\n        return this._rarities;\r\n    }\r\n\r\n    get races() {\r\n        return this._races;\r\n    }\r\n\r\n    get patch() {\r\n        return this._patch;\r\n    }\r\n\r\n    get cardsShown() {\r\n        return this._cardsShown;\r\n    }\r\n\r\n    get decks() {\r\n        return this._decks.decks;\r\n    }\r\n\r\n    getDeck(id) {\r\n        return this._decks.decks.find(deck => deck.id === id);\r\n    }\r\n\r\n    addDeck(deck) {\r\n        this._decks.decks.push(deck);\r\n    }\r\n\r\n    removeDeck(deckId) {\r\n        this._decks.decks = this._decks.decks.filter(d => d.id !== deckId);\r\n    }\r\n\r\n    get activeDeck() {\r\n        return this._decks.activeDeck;\r\n    }\r\n\r\n    set activeDeck(id) {\r\n        this._decks.activeDeck = id;\r\n    }\r\n\r\n    get nCachedCards() {\r\n        return this._cardsCache.length + this._cardsNoImageCache.length;\r\n    }\r\n}","import { requestInfo } from './api';\r\nimport { DeckBuilder } from '../Classes/DeckBuilder';\r\n\r\n/**\r\n * Create and initialize Deck Board Object with info retrieved from the endpoint\r\n */\r\nexport async function initDB() {\r\n    const info = await requestInfo();\r\n    const db = new DeckBuilder(\r\n        info.classes,\r\n        info.sets,\r\n        info.types,\r\n        info.factions,\r\n        info.qualities,\r\n        info.races,\r\n        info.patch\r\n    );\r\n\r\n    return db;\r\n}","import tyrande from '../../assets/tyrande.png';\r\nimport error from '../../assets/error-bg.png';\r\nimport { Deck } from '../Classes/Deck';\r\n\r\n/* Draw filters based into info provided from deck board object */\r\nexport async function drawFilters(db) {\r\n    const selectors = db.getSelectors();\r\n    Object.entries(selectors).forEach(([k, v]) => {\r\n        const select = document.createElement('select');\r\n        select.classList.add('filter-select');\r\n        select.id = v.text.replace(/ +/g, '-') + '-select';\r\n        select.setAttribute('data-identifier', k);\r\n        const optionElement = document.createElement('option');\r\n        optionElement.setAttribute('value', '');\r\n        optionElement.textContent = 'All ' + v.text;\r\n        select.appendChild(optionElement);\r\n        v.arr.forEach(option => {\r\n            const optionElement = document.createElement('option');\r\n            optionElement.setAttribute('value', option);\r\n            optionElement.innerHTML = option;\r\n            select.appendChild(optionElement);\r\n        });\r\n        document.querySelector('#select-container').appendChild(select);\r\n    });\r\n\r\n    /* draw the current patch */\r\n    document.querySelector('#patch').innerHTML = 'Patch: ' + db.patch;\r\n}\r\n\r\n/* bind events to the filters elements */\r\nexport async function bindFilterEvents(db) {\r\n    /* foreach select bind his own event */\r\n    document.querySelector('#select-container').childNodes.forEach(select => {\r\n        const selectId = select.dataset.identifier;\r\n        select.addEventListener('change', async event => {\r\n            const cardsContainer = document.querySelector('#cardsContainer');\r\n            /* draw the loading effect */\r\n            cardsContainer.innerHTML = '<div class=\"loader\">Loading...</div>';\r\n            if (!event.target.value) {\r\n                /* if no value remove filer */\r\n                await db.removeFilter(selectId);\r\n            } else {\r\n                /* if value apply or modify filter */\r\n                await db.applyFilter(selectId, event.target.value);\r\n            }\r\n            /* after apply or remove filter draw cards */\r\n            drawCards(db);\r\n        });\r\n    });\r\n}\r\n\r\n/* draws the cards that has to be shown */\r\nexport function drawCards(db) {\r\n    const cardsContainer = document.querySelector('#cardsContainer');\r\n    cardsContainer.textContent = '';\r\n    /* if no cards to show and no filters applied draw starting page */\r\n    if (db.cardsShown.length === 0 && !db.someFilterApplied()) {\r\n        const noCardDiv = document.createElement('div');\r\n        noCardDiv.classList.add('no-cards-shown', 'mt-15vh');\r\n        const noCardImg = document.createElement('img');\r\n        noCardImg.src = tyrande;\r\n        noCardImg.classList.add('no-cards-shown-img');\r\n        const noCardText = document.createElement('h1');\r\n        noCardText.innerHTML = 'Select some filter to start';\r\n        noCardText.classList.add('no-cards-shown-text');\r\n        noCardDiv.appendChild(noCardImg);\r\n        noCardDiv.appendChild(noCardText);\r\n        cardsContainer.appendChild(noCardDiv);\r\n    }\r\n    /* if no cards to show and filters applied draw zero cards found page */\r\n    if (db.cardsShown.length === 0 && db.someFilterApplied()) {\r\n        const noCardDiv = document.createElement('div');\r\n        noCardDiv.classList.add('no-cards-shown', 'mt-10vh');\r\n        const noCardImg = document.createElement('img');\r\n        noCardImg.src = error;\r\n        noCardImg.classList.add('error-img');\r\n        const noCardText = document.createElement('h1');\r\n        noCardText.innerHTML = 'Ooops! Nothing to show . . .';\r\n        noCardText.classList.add('no-cards-shown-text');\r\n        noCardDiv.appendChild(noCardImg);\r\n        noCardDiv.appendChild(noCardText);\r\n        cardsContainer.appendChild(noCardDiv);\r\n    } else {\r\n        /* for each card found draw it */\r\n        db.cardsShown.forEach(async c => {\r\n            const cardDiv = document.createElement('div');\r\n            cardDiv.classList.add('individual-card-container');\r\n            const cardImg = document.createElement('img');\r\n            cardImg.classList.add('card-img');\r\n            cardImg.src = c.img;\r\n            cardImg.id = c.cardId;\r\n            /* add event that fires if image returns 404. That event removes node from DOM and triggers db.cardWithNoImg() */\r\n            cardImg.addEventListener('error', () => {\r\n                document\r\n                    .querySelector('#cardsContainer')\r\n                    .removeChild(document.querySelector('#' + c.cardId).parentElement);\r\n                db.cardWithNoImg(c);\r\n            });\r\n            /* add event on click at every image. */\r\n            cardImg.addEventListener('click', async event => {\r\n                /* if click specific image retrieve ALL info from API */\r\n                await db.getCardByCardId(event.target.id);\r\n                /* if there are some active deck add card to that deck */\r\n                if (db.activeDeck) {\r\n                    /* add card to deck and build DOM node */\r\n                    const deck = db.getDeck(db.activeDeck);\r\n                    deck.addCard(c);\r\n                    /* when card is added save the current decks status to browser */\r\n                    localStorage.setItem('HearthstoneDeckBuilderDecks', JSON.stringify(db.decks));\r\n                    const cardsList = document.querySelector('#cards-in-deck-list');\r\n                    const listElement = document.createElement('li');\r\n                    listElement.id = 'deck-listed-card-' + c.cardId;\r\n                    listElement.classList.add('deck-list-element');\r\n                    const name = document.createElement('span');\r\n                    name.classList.add('card-deck-name');\r\n                    name.textContent = c.name;\r\n                    /* add event listener to that node to show card info */\r\n                    name.addEventListener('click', () => {\r\n                        drawCardInfo(c);\r\n                    });\r\n                    /* build a delete icon  */\r\n                    const delContainer = document.createElement('span');\r\n                    delContainer.classList.add('delete-icon');\r\n                    const del = document.createElement('i');\r\n                    del.classList.add('material-icons');\r\n                    del.setAttribute('title', 'Delete');\r\n                    del.append(document.createTextNode('delete'));\r\n                    /* on click that icon delete node from DOM and remove card from active deck */\r\n                    del.addEventListener('click', () => {\r\n                        document.getElementById('deck-listed-card-' + c.cardId).remove();\r\n                        deck.removeCard(c.cardId);\r\n                        /* when card is removed save the current decks status to browser */\r\n                        localStorage.setItem('HearthstoneDeckBuilderDecks', JSON.stringify(db.decks));\r\n                    });\r\n                    delContainer.appendChild(del);\r\n                    listElement.appendChild(name);\r\n                    listElement.appendChild(delContainer);\r\n                    cardsList.appendChild(listElement);\r\n                } else {\r\n                    //alert('Select or create a deck before adding cards to it');\r\n                }\r\n                /* draw card info */\r\n                drawCardInfo(c);\r\n            });\r\n            cardImg.classList.add('card-img');\r\n            cardDiv.appendChild(cardImg);\r\n            cardsContainer.appendChild(cardDiv);\r\n        });\r\n    }\r\n    /* update the number of cards cached */\r\n    document.querySelector('#cached-cards').textContent = 'Cached Cards: ' + db.nCachedCards;\r\n}\r\n\r\n/* draw decks */\r\nexport async function drawDecks(db) {\r\n    const decksContainer = document.querySelector('#decks-container');\r\n    decksContainer.innerHTML = '';\r\n    /* deck title */\r\n    const titleDiv = document.createElement('div');\r\n    titleDiv.classList.add('deck-content-title');\r\n    const title = document.createElement('span');\r\n    title.textContent = 'My decks';\r\n    titleDiv.appendChild(title);\r\n    decksContainer.appendChild(titleDiv);\r\n    /* button to add deck */\r\n    const createDeckButton = document.createElement('button');\r\n    createDeckButton.classList.add('deck-section-button', 'button');\r\n    createDeckButton.id = 'create-deck-button';\r\n    createDeckButton.innerHTML = 'New deck';\r\n    /* on click create new deck */\r\n    createDeckButton.addEventListener('click', () => {\r\n        const deck = new Deck();\r\n        db.addDeck(deck);\r\n        /* on create deck save new deck status */\r\n        localStorage.setItem('HearthstoneDeckBuilderDecks', JSON.stringify(db.decks));\r\n        const deckDiv = document.createElement('div');\r\n        deckDiv.classList.add('deck-element');\r\n        deckDiv.id = deck.id;\r\n        const deckTitle = document.createElement('span');\r\n        deckTitle.classList.add('deck-title-element');\r\n        deckTitle.textContent = deck.name;\r\n        /* on click set that deck to active deck */\r\n        deckTitle.addEventListener('click', () => {\r\n            db.activeDeck = deck.id;\r\n            drawActiveDeck(db);\r\n        });\r\n        /* make a delete deck icon */\r\n        const delContainer = document.createElement('span');\r\n        delContainer.classList.add('delete-icon');\r\n        const del = document.createElement('i');\r\n        del.classList.add('material-icons');\r\n        del.setAttribute('title', 'Delete');\r\n        del.append(document.createTextNode('delete'));\r\n        /* on click remove node from DOM and remove deck from deck builder */\r\n        del.addEventListener('click', () => {\r\n            document.getElementById(deck.id).remove();\r\n            db.removeDeck(deck.id);\r\n            /* save new decks status */\r\n            localStorage.setItem('HearthstoneDeckBuilderDecks', JSON.stringify(db.decks));\r\n        });\r\n        delContainer.appendChild(del);\r\n\r\n        deckDiv.appendChild(deckTitle);\r\n        deckDiv.appendChild(delContainer);\r\n        decksContainer.insertBefore(deckDiv, createDeckButton);\r\n    });\r\n    /* if there are others decks draw them to de DOM too */\r\n    db.decks.forEach(deck => {\r\n        const deckDiv = document.createElement('div');\r\n        deckDiv.classList.add('deck-element');\r\n        deckDiv.id = deck.id;\r\n        const deckTitle = document.createElement('span');\r\n        deckTitle.classList.add('deck-title-element');\r\n        deckTitle.textContent = deck.name;\r\n        deckTitle.addEventListener('click', () => {\r\n            db.activeDeck = deck.id;\r\n            drawActiveDeck(db);\r\n        });\r\n        const delContainer = document.createElement('span');\r\n        delContainer.classList.add('delete-icon');\r\n        const del = document.createElement('i');\r\n        del.classList.add('material-icons');\r\n        del.setAttribute('title', 'Delete');\r\n        del.append(document.createTextNode('delete'));\r\n        del.addEventListener('click', () => {\r\n            document.getElementById(deck.id).remove();\r\n            db.removeDeck(deck.id);\r\n            localStorage.setItem('HearthstoneDeckBuilderDecks', JSON.stringify(db.decks));\r\n        });\r\n        delContainer.appendChild(del);\r\n\r\n        deckDiv.appendChild(deckTitle);\r\n        deckDiv.appendChild(delContainer);\r\n        decksContainer.appendChild(deckDiv);\r\n    });\r\n    decksContainer.appendChild(createDeckButton);\r\n}\r\n\r\n/* draw active deck */\r\nfunction drawActiveDeck(db) {\r\n    const decksContainer = document.querySelector('#decks-container');\r\n    decksContainer.innerHTML = '';\r\n    /* get active deck */\r\n    const deck = db.getDeck(db.activeDeck);\r\n    /* draw title */\r\n    const titleDiv = document.createElement('div');\r\n    titleDiv.classList.add('deck-content-title');\r\n    const title = document.createElement('span');\r\n    /* make it editable so users can change name of the deck */\r\n    title.contentEditable = true;\r\n    title.classList.add('editable', 'deck-title-span');\r\n    title.textContent = deck.name;\r\n    titleDiv.appendChild(title);\r\n    /* on focus out save name */\r\n    title.addEventListener('focusout', event => {\r\n        if (event.target.textContent) {\r\n            deck.name = event.target.textContent.substring(0, 15).replace(/[^a-z0-9 ]/gi, '');\r\n        }\r\n        title.textContent = deck.name;\r\n        localStorage.setItem('HearthstoneDeckBuilderDecks', JSON.stringify(db.decks));\r\n    });\r\n    decksContainer.appendChild(titleDiv);\r\n    const cardsInDeckContainer = document.createElement('div');\r\n    const cardsInDeck = document.createElement('ul');\r\n    cardsInDeck.id = 'cards-in-deck-list';\r\n    cardsInDeck.classList.add('cards-in-deck-list');\r\n    /* for each card already added to deck draw it  */\r\n    deck.cards.forEach(card => {\r\n        const listElement = document.createElement('li');\r\n        listElement.id = 'deck-listed-card-' + card.cardId;\r\n        listElement.classList.add('deck-list-element');\r\n        const name = document.createElement('span');\r\n        name.classList.add('card-deck-name');\r\n        name.textContent = card.name;\r\n        /* on click the card show info */\r\n        name.addEventListener('click', () => {\r\n            drawCardInfo(card);\r\n        });\r\n        /* every card has his own delete icon */\r\n        const delContainer = document.createElement('span');\r\n        delContainer.classList.add('delete-icon');\r\n        const del = document.createElement('i');\r\n        del.classList.add('material-icons');\r\n        del.setAttribute('title', 'Delete');\r\n        del.append(document.createTextNode('delete'));\r\n        del.addEventListener('click', () => {\r\n            document.getElementById('deck-listed-card-' + card.cardId).remove();\r\n            deck.removeCard(card.cardId);\r\n            localStorage.setItem('HearthstoneDeckBuilderDecks', JSON.stringify(db.decks));\r\n        });\r\n        delContainer.appendChild(del);\r\n        listElement.appendChild(name);\r\n        listElement.appendChild(delContainer);\r\n        cardsInDeck.appendChild(listElement);\r\n    });\r\n    cardsInDeckContainer.appendChild(cardsInDeck);\r\n    decksContainer.appendChild(cardsInDeckContainer);\r\n    /* go back button to return to my decks */\r\n    const deckFooter = document.createElement('div');\r\n    const backLink = document.createElement('button');\r\n    backLink.classList.add('deck-section-button', 'button');\r\n    backLink.id = 'back-deck-button';\r\n    backLink.innerHTML = 'Back';\r\n    backLink.addEventListener('click', () => {\r\n        db.activeDeck = undefined;\r\n        drawDecks(db);\r\n    });\r\n    deckFooter.appendChild(backLink);\r\n    decksContainer.appendChild(deckFooter);\r\n}\r\n\r\n/* draw card info */\r\nexport function drawCardInfo(card) {\r\n    const cardInfoContainer = document.querySelector('#card-info');\r\n    cardInfoContainer.innerHTML = '';\r\n    /* title */\r\n    const titleDiv = document.createElement('div');\r\n    titleDiv.classList.add('card-info-title');\r\n    const title = document.createElement('span');\r\n    title.textContent = 'Card Info';\r\n    titleDiv.appendChild(title);\r\n    cardInfoContainer.appendChild(titleDiv);\r\n\r\n    /* for each property set of that card draw it */\r\n    Object.entries(card.getAllProperties()).forEach(([k, v]) => {\r\n        const contentDiv = document.createElement('div');\r\n        contentDiv.classList.add('card-info-property');\r\n        contentDiv.innerHTML = '<span class=\"strong\">' + k + ':</span> ' + v;\r\n        cardInfoContainer.appendChild(contentDiv);\r\n    });\r\n}","import { initDB } from './utils/initDB';\r\n\r\nimport { drawFilters, bindFilterEvents, drawCards, drawDecks } from './utils/views';\r\n\r\n(async() => {\r\n    const db = await initDB();\r\n    await drawFilters(db);\r\n    await drawDecks(db);\r\n    await bindFilterEvents(db);\r\n    drawCards(db);\r\n\r\n    console.log(db);\r\n})();"]}